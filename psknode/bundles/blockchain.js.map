{"version":3,"sources":["node_modules/browser-pack/_prelude.js","builds/tmp/blockchain_intermediar.js","modules/blockchain/OBFT/OBFTImplementation.js","modules/blockchain/OBFT/PulseUtil.js","modules/blockchain/OBFT/transactionsUtil.js","modules/blockchain/blockchainSwarmTypes/asset_swarm_template.js","modules/blockchain/blockchainSwarmTypes/transaction_swarm_template.js","modules/blockchain/defaultConstitution/assets/ACLScope.js","modules/blockchain/defaultConstitution/assets/Agent.js","modules/blockchain/defaultConstitution/assets/Backup.js","modules/blockchain/defaultConstitution/assets/BarAnchor.js","modules/blockchain/defaultConstitution/assets/CSBMeta.js","modules/blockchain/defaultConstitution/assets/DomainConfig.js","modules/blockchain/defaultConstitution/assets/DomainReference.js","modules/blockchain/defaultConstitution/assets/FileAnchor.js","modules/blockchain/defaultConstitution/assets/Key.js","modules/blockchain/defaultConstitution/assets/index.js","modules/blockchain/defaultConstitution/swarms/index.js","modules/blockchain/defaultConstitution/transactions/agentTransaction.js","modules/blockchain/defaultConstitution/transactions/domainConfigTransaction.js","modules/blockchain/defaultConstitution/transactions/domainTransaction.js","modules/blockchain/defaultConstitution/transactions/firstTransactionWorkaroundDeleteThis.js","modules/blockchain/defaultConstitution/transactions/index.js","modules/blockchain/defaultConstitution/transactions/sharedPhases.js","modules/blockchain/defaultConstitution/transactions/standardCSBTransactions.js","modules/blockchain/defaultConstitution/transactions/transactions.js","modules/blockchain/moduleConstants.js","modules/blockchain/moduleExports.js","modules/blockchain/pskdb/Blockchain.js","modules/blockchain/pskdb/index.js","modules/blockchain/pskdb/pskdb.js","modules/blockchain/pskdb/securityParadigms/localExecutionCache.js","modules/blockchain/pskdb/securityParadigms/securityParadigmRegistry.js","modules/blockchain/signsensus/SignSensusImplementation.js","modules/blockchain/strategies/consensusAlgortims/consensusAlgoritmsRegistry.js","modules/blockchain/strategies/historyStorages/BarHistoryStorage.js","modules/blockchain/strategies/historyStorages/FsHistoryStorage.js","modules/blockchain/strategies/historyStorages/LatestHashTracker.js","modules/blockchain/strategies/historyStorages/MemoryHistoryStorage.js","modules/blockchain/strategies/historyStorages/historyStoragesRegistry.js","modules/blockchain/strategies/networkCommunication/networkCommunicationStrategiesRegistry.js","modules/blockchain/strategies/signatureProvidersRegistry/signatureProvidersRegistry.js","modules/blockchain/strategies/votingStrategies/votingStrategiesRegistry.js","modules/blockchain/strategies/worldStateCaches/worldStateCacheRegistry.js","node_modules/source-map/lib/array-set.js","node_modules/source-map/lib/base64-vlq.js","node_modules/source-map/lib/base64.js","node_modules/source-map/lib/binary-search.js","node_modules/source-map/lib/mapping-list.js","node_modules/source-map/lib/quick-sort.js","node_modules/source-map/lib/source-map-consumer.js","node_modules/source-map/lib/source-map-generator.js","node_modules/source-map/lib/source-node.js","node_modules/source-map/lib/util.js","modules/blockchain/index.js","node_modules/buffer-from/index.js","node_modules/source-map-support/source-map-support.js","node_modules/source-map/source-map.js"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACztBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvxYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzzvvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AChzznljhajaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACrlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"generated.js","sourceRoot":"../..","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","global.blockchainLoadModules = function(){ \n\n\tif(typeof $$.__runtimeModules[\"source-map-support\"] === \"undefined\"){\n\t\t$$.__runtimeModules[\"source-map-support\"] = require(\"source-map-support\");\n\t}\n\n\tif(typeof $$.__runtimeModules[\"source-map\"] === \"undefined\"){\n\t\t$$.__runtimeModules[\"source-map\"] = require(\"source-map\");\n\t}\n\n\tif(typeof $$.__runtimeModules[\"buffer-from\"] === \"undefined\"){\n\t\t$$.__runtimeModules[\"buffer-from\"] = require(\"buffer-from\");\n\t}\n\n\tif(typeof $$.__runtimeModules[\"blockchain\"] === \"undefined\"){\n\t\t$$.__runtimeModules[\"blockchain\"] = require(\"blockchain\");\n\t}\n};\nif (false) {\n\tblockchainLoadModules();\n}\nglobal.blockchainRequire = require;\nif (typeof $$ !== \"undefined\") {\n\t$$.requireBundle(\"blockchain\");\n}\nrequire('source-map-support').install({});","let pskcrypto = require(\"pskcrypto\");\nlet fs = require(\"fs\");\n\nlet consUtil = require(\"./transactionsUtil\");\n\n\n\nlet detailedDebug = false;\n\n\n\n\nlet OBFTPSwarm = $$.flow.describe(\"OBFTProcess\", {\n    start: function (delegatedAgentName, communicationOutlet, pdsAdapter, pulsePeriodicity, latency, votingBox) {\n\n        this.lset = {}; // digest -> transaction - localy generated set of transactions (`createTransactionFromSwarm` stores each transaction; `beat` resets `lset`)\n        /*this.dset = {}; // digest -> transaction - remotely delivered set of transactions that will be next participate in consensus\n        this.pset = {}; // digest -> transaction - consensus pending set */\n\n        this.CP = 0;\n        this.CI = undefined;\n        this.LAST = 0;\n        this.TOP = this.LAST+2*latency;\n        this.NEXT = this.TOP+latency;\n        this.NTOP = this.TOP+2*latency;\n\n        this.pulsesHistory = new PulseHistory();\n\n        this.vsd = pdsAdapter.getHashLatestBlock();\n\n\n        this.currentBlock = 0;\n        this.nodeName               = delegatedAgentName;\n        this.communicationOutlet    = communicationOutlet;\n        this.pds                    = pdsAdapter;\n        this.PP                     = pulsePeriodicity;\n        this.LATENCY                = latency;\n        this.votingBox              = votingBox;\n        this.explictPhase           = \"default\"; /* default, boot, late, broken*/\n\n        this.bootNode();\n    },\n    /*\n    * @param {transaction}\n    */\n    receiveTransaction:function(t){\n        this.lset[t.digest] = t;\n    },\n    /*\n     * @param {}\n    */\n    sendPulse: function () {\n        switch(this.explictPhase){\n            case \"boot\": break;\n            case \"late\": break;\n            case \"ntop\": this.sendAtNTOP(); break;\n            case \"broken\":this.whenBroken_HumanInterventionIsRequired(); break\n            default:\n                if(this.CP <= this.TOP) this.sendUntilTOP(); else\n                if(this.CP < this.NEXT) this.sendUntilNEXT(); else\n                if(this.CP == this.NEXT) this.sendAtNEXT(); else\n                if(this.CP < this.NTOP) this.sendUntilNTOP(); else\n                if(this.CP == this.NTOP) this.sendAtNTOP(); else\n                    console.log(\"Should not happen\");\n        }\n        setTimeout(this.sendPulse, this.PP);   //self invocation of the phase\n    },\n    /*\n     * @param {}\n    */\n    sendUntilTOP: function () {\n        communicationOutlet.newPulse()\n    },\n    /*\n     * @param {}\n    */\n    sendUntilNEXT: function () {\n\n    },\n    /*\n     * @param {}\n    */\n    sendAtNEXT: function () {\n\n    },\n    /*\n     * @param {}\n    */\n    sendUntilNTOP: function () {\n\n    },\n    /*\n     * @param {}\n    */\n    sendAtNTOP: function () {\n\n    },\n    /*\n     * @param {}\n    */\n    whenSlowNode: function () {\n\n    },\n    /*\n     * @param {}\n    */\n    whenSlowNetwork: function () {\n\n    },\n    /*\n     * @param {}\n    */\n    whenBroken_HumanInterventionIsRequired: function () {\n\n    },\n    /*\n     * @param {pulse}\n    */\n    receivePulse:function(pulse){\n\n    },\n    /*\n     * @param {}\n    */\n    bootNode: function () {\n        this.explictPhase = \"BOOT\";\n    },\n     /*\n     * @param {Pulse} pulse e.g. new Pulse(this.nodeName, this.currentPulse, ......)\n     */\n    recordPulse: function (pulse) {\n    },\n    /*\n         * @param {}\n        */\n    requestMissingPulse: function () {\n\n    }\n});\n\n\n/**\n * @param {String} delegatedAgentName e.g. 'Node 0', or 'agent_007'\n * @param {Object} communicationOutlet e.g. object to be used in phase `beat` of the returned \"pulseSwarm\" flow\n *  - it should have a property: `broadcastPulse`: function(from, pulse) {...}\n *      - {String} `from` e.g. `delegatedAgentName`\n *      - {Pulse} `pulse` (see 'transactionsUtil.js')\n * @param {InMemoryPDS} pdsAdapter e.g. require(\"pskdb/lib/InMemoryPDS\").newPDS(null);\n * @param {Number} pulsePeriodicity e.g. 300\n * \n * @returns {SwarmDescription} A new instance of \"pulseSwarm\" flow, with phase `start` already running\n */\nexports.createConsensusManager = function (delegatedAgentName, communicationOutlet, pdsAdapter, pulsePeriodicity, votingBox) {\n    let instance = pulseSwarm();\n    instance.start(delegatedAgentName, communicationOutlet, pdsAdapter, pulsePeriodicity, votingBox);\n    return instance;\n}\n","function PulseUtil(signer, currentPulseNumber, block, newTransactions, vsd, top, last) {\n    this.signer         = signer;               //a.k.a. delegatedAgentName\n    this.currentPulse   = currentPulseNumber;\n    this.lset           = newTransactions;      //digest -> transaction\n    this.ptBlock        = block;                //array of digests\n    this.vsd            = vsd;\n    this.top            = top;                  // a.k.a. topPulseConsensus\n    this.last           = last;                 // a.k.a. lastPulseAchievedConsensus\n}\n\n\nmodule.exports.createPulse = function (signer, CP, CI, lset, top, last) {\n    return new PulseUtil(signer, CP, CI, lset, vsd, top, last);\n}\n\n\nfunction PulseHistory(){\n\n}\n\nmodule.exports.createPulseHistory = function () {\n    return new PulseHistory();\n}","/*\nconsensus helper functions when working with transactions\n*/\n\nlet  pskcrypto = require(\"pskcrypto\");\n\n\nmodule.exports.orderCRTransactions = function (pset) { //order in place the pset array\n    var arr = [];\n    for (let d in pset) {\n        arr.push(pset[d]);\n    }\n\n    arr.sort(function (t1, t2) {\n        if (t1.transactionPulse < t2.transactionPulse) return -1;\n        if (t1.transactionPulse > t2.transactionPulse) return 1;\n        if (t1.second < t2.second) return -1;\n        if (t1.second > t2.second) return 1;\n        if (t1.nanosecod < t2.nanosecod) return -1;\n        if (t1.nanosecod > t2.nanosecod) return 1;\n        if (t1.digest < t2.digest) return -1;\n        if (t1.digest > t2.digest) return 1;\n        return 0; //only for identical transactions...\n    })\n    return arr;\n}\n","var CNST = require(\"../moduleConstants\");\n\nexports.createForObject = function(valueObject, thisObject, localId){\n\tvar callflowModule = require(\"callflow\");\n\tvar ret = callflowModule.createStandardAPIsForSwarms(valueObject, thisObject, localId);\n\n\tret.swarm           = null;\n\tret.onReturn        = null;\n\tret.onResult        = null;\n\tret.asyncReturn     = null;\n\tret.return          = null;\n\tret.home            = null;\n\n\tret.autoInit        = function(blockchain){\n\t\tif(!blockchain) {\n\t\t\t$$.warn(\"Initialisation asset outside of a blockchain context\");\n\t\t\treturn;\n\t\t}\n\t\tlet sp = thisObject.getMetadata(CNST.SECURITY_PARADIGM);\n\t\tthisObject.securityParadigm = blockchain.getSPRegistry().getSecurityParadigm(thisObject);\n\t\tif(sp == undefined){\n\t\t\tlet ctor = valueObject.myFunctions[CNST.CTOR];\n\t\t\tif(ctor){\n\t\t\t\tctor.apply(thisObject);\n\t\t\t}\n\t\t}\n\t};\n\n\tret.getSwarmId = function(){\n\t\treturn \tthisObject.getMetadata(CNST.SWARMID);\n\t};\n\n\tret.getSwarmType = function(){\n\t\treturn \tthisObject.getMetadata(CNST.SWARMTYPE);\n\t};\n\n\tret.__reinit = function(blockchain){\n\t\tret.autoInit(blockchain);\n\t};\n\n\tret.asJSON = function(){\n\t\treturn thisObject.getInnerValue().publicVars;\n\t};\n\n\treturn ret;\n};","let CNST = require(\"../moduleConstants\");\n\nexports.createForObject = function(valueObject, thisObject, localId){\n\tlet callflowModule = require(\"callflow\");\n\n\tlet _blockchain = undefined;\n\tlet ret = callflowModule.createStandardAPIsForSwarms(valueObject, thisObject, localId);\n\tret.swarm           = null;\n\tret.onReturn        = null;\n\tret.onResult        = null;\n\tret.asyncReturn     = null;\n\tret.autoInit        = function(blockchain){\n\t\t_blockchain = blockchain;\n\t\tthisObject.transaction = blockchain.beginTransaction(thisObject);\n\t};\n\n\tret.commit = function () {\n\t\t_blockchain.commit(thisObject.transaction, (error, status) => {\n\t\t\tthisObject.transaction.getSwarm().notify({eventType: \"commit\", error, status});\n\t\t});\n\t};\n\n\tret.onCommit = function (callback) {\n\t\tthisObject.observe((event) => {\n\t\t\tcallback(event.error, event.status);\n\t\t}, undefined, (event)=>{\n\t\t\treturn event.eventType === \"commit\";\n\t\t});\n\t};\n\n\tret.onReturn = function (callback) {\n\t\tthisObject.observe((event) => {\n\t\t\tcallback(event.error, event.result);\n\t\t}, undefined, (event)=>{\n\t\t\treturn event.eventType === \"return\";\n\t\t});\n\t};\n\n\tret.return = function(error, result){\n\t\tthisObject.notify({eventType: \"return\", error, result});\n\t};\n\n\tret.home = ret.return;\n\n\treturn ret;\n};","\n$$.asset.describe(\"ACLScope\", {\n    public:{\n        concern:\"string:key\",\n        db:\"json\"\n    },\n    init:function(concern){\n        this.concern = concern;\n    },\n    addResourceParent : function(resourceId, parentId){\n\n    },\n    addZoneParent : function(zoneId, parentId){\n\n    },\n    grant :function(agentId,  resourceId){\n\n    },\n    allow :function(agentId,  resourceId){\n        return true;\n    }\n});","\n$$.asset.describe(\"Agent\", {\n    public:{\n        alias:\"string:key\",\n        publicKey:\"string\"\n    },\n    init:function(alias, value){\n        this.alias      = alias;\n        this.publicKey  = value;\n    },\n    update:function(value){\n        this.publicKey = value;\n    },\n    addAgent: function () {\n        throw new Error('Not Implemented');\n    },\n    listAgent: function () {\n        throw new Error('Not Implemented');\n\n    },\n    removeAgent: function () {\n        throw new Error('Not Implemented');\n\n    }\n});","\n$$.asset.describe(\"Backup\", {\n    public:{\n        id:  \"string\",\n        url: \"string\"\n    },\n\n    init:function(id, url){\n        this.id = id;\n        this.url = url;\n    }\n});\n","$$.asset.describe(\"BarAnchor\", {\n    public: {\n        alias: \"string\",\n        mountPoint: \"string\",\n        barMapDigest: \"string\",\n        readList: \"array\", //encrypted seeds with public keys\n        writeList: \"array\", //agentIds\n    },\n    init: function (mountPoint, barMapDigest) {\n        this.mountPoint = mountPoint;\n        this.barMapDigest = barMapDigest;\n    },\n    updateReadList: function (encryptedSeed) {\n        if (!this.readList) {\n            this.readList = [];\n        }\n        this.readList.push(encryptedSeed);\n    },\n    updateWriteList: function (agentId) {\n        if (!this.writeList) {\n            this.writeList = [];\n        }\n\n        this.writeList.push(agentId);\n    }\n});","\n$$.asset.describe(\"CSBMeta\", {\n\tpublic:{\n\t\tisMaster:\"string\",\n\t\talias:\"string:key\",\n\t\tdescription: \"string\",\n\t\tcreationDate: \"string\",\n\t\tupdatedDate : \"string\",\n\t\tid: \"string\",\n\t\ticon: \"string\"\n\t},\n\tinit:function(id){\n\t\tthis.alias = \"meta\";\n\t\tthis.id = id;\n\t},\n\n\tsetIsMaster: function (isMaster) {\n\t\tthis.isMaster = isMaster;\n\t}\n\n});\n","\n$$.asset.describe(\"DomainConfig\", {\n    public:{\n        alias:\"string:key\",\n        blockChainStorageFolderName:\"\",\n        addresses: \"map\",\n        communicationInterfaces: \"map\",\n        workerStrategy: \"string\"\n    },\n    init:function(alias){\n        this.alias = alias;\n        this.addresses = {};\n        this.communicationInterfaces = {};\n        this.workerStrategy = 'threads';\n    },\n    updateDomainAddress:function(replicationAgent, address){\n        if(!this.addresses){\n            this.addresses = {};\n        }\n        this.addresses[replicationAgent] = address;\n    },\n    removeDomainAddress:function(replicationAgent){\n        this.addresses[replicationAgent] = undefined;\n        delete this.addresses[replicationAgent];\n    },\n    setBlockChainStorageFolderName: function(storageFolderName){\n        this.blockChainStorageFolderName = storageFolderName;\n    },\n    getBlockChainStorageFolderName: function() {\n        return this.blockChainStorageFolderName;\n    },\n    addCommunicationInterface(alias, virtualMQEndpoint, zeroMQEndpoint) {\n        if (!this.communicationInterfaces) {\n            this.communicationInterfaces = {};\n        }\n        this.communicationInterfaces[alias] = {virtualMQ: virtualMQEndpoint, zeroMQ: zeroMQEndpoint};\n    },\n    setWorkerStrategy: function(workerStrategy) {\n        this.workerStrategy = workerStrategy;\n    }\n});","\n$$.asset.describe(\"DomainReference\", {\n    public:{\n        role:\"string:index\",\n        alias:\"string:key\",\n        constitution:\"string\",\n        workspace:\"string\"\n    },\n    init:function(role, alias){\n        this.role = role;\n        this.alias = alias;\n    },\n    setConstitution:function(pathOrUrlOrCSB){\n        this.constitution = pathOrUrlOrCSB;\n    },\n    getConstitution:function(){\n        return this.constitution;\n    },\n    setWorkspace:function(path){\n        this.workspace = path;\n    },\n    getWorkspace:function(){\n        return this.workspace;\n    }\n});","$$.asset.describe(\"FileAnchor\", {\n    public: {\n        alias: \"string\",\n        type: \"string\",\n        seed: \"string\",\n        digest: \"string\", //csb digest after file addition\n        readList: \"array\", //encrypted seeds with public keys\n        writeList: \"array\", //agentIds\n    },\n    init: function (alias, type, seed, digest) {\n        this.alias = alias;\n        this.type = type;\n        this.seed = seed;\n        this.digest = digest;\n    }\n});\n\n","\n$$.asset.describe(\"key\", {\n    public:{\n        alias:\"string\"\n    },\n    init:function(alias, value){\n        this.alias = alias;\n        this.value = value;\n    },\n    update:function(value){\n        this.value = value;\n    }\n});","module.exports = $$.library(function(){\n    require(\"./DomainReference\");\n    require(\"./DomainConfig\");\n    require(\"./Agent\");\n    require(\"./Backup\");\n    require(\"./ACLScope\");\n    require(\"./Key\");\n    require(\"../transactions/transactions\");\n    require(\"./BarAnchor\");\n    require(\"./FileAnchor\");\n    require('./CSBMeta');\n});","if($$.swarms){\n    $$.swarms.describe(\"transactionHandler\", {\n        start: function (identity, transactionName, methodName, ...args) {\n            let transaction = $$.blockchain.startTransactionAs(identity, transactionName, methodName, ...args);\n            transaction.onReturn((err, result) => {\n                this.return(err, result);\n            });\n        }\n    });\n}\n","const sharedPhases = require('./sharedPhases');\n\n$$.transaction.describe(\"Agents\", {\n    add: function (alias, publicKey) {\n        let agent = $$.blockchain.lookup(\"Agent\", alias);\n        if(!agent){\n            agent = $$.asset.start(\"Agent\", \"init\", alias, publicKey);\n        }else{\n            $$.exception(`Agent with ${alias} already exists!`);\n        }\n\n        this.transaction.add(agent);\n        this.onCommit(()=>{\n            this.return(undefined, agent.asJSON());\n        });\n        this.commit();\n    },\n    getAgents: sharedPhases.getAllAssetsFactory('global.Agent')\n});\n","const sharedPhases = require('./sharedPhases');\n\n$$.transaction.describe(\"DomainConfigTransaction\", {\n    add: function (alias, communicationInterfaces, workerStrategy) {\n        let domain = this.transaction.lookup(\"DomainConfig\", alias);\n\n        if(!domain){\n            domain = this.transaction.createAsset(\"DomainConfig\", \"init\", alias);\n        }else{\n            $$.exception(`Domain with ${alias} already exists!`);\n        }\n\n        if(typeof communicationInterfaces !== \"undefined\"){\n            Object.keys(communicationInterfaces).forEach(commAlias => {\n                const {virtualMQ, zeroMQ} = communicationInterfaces[commAlias];\n                domain.addCommunicationInterface(commAlias, virtualMQ, zeroMQ);\n            });\n        }\n\n        if(workerStrategy) {\n            domain.setWorkerStrategy(workerStrategy);\n        }\n\n        this.transaction.add(domain);\n        this.onCommit(()=>{\n            this.return(undefined, domain.asJSON());\n        });\n        this.commit();\n    },\n    getDomainDetails: sharedPhases.getAssetFactory('global.DomainConfig'),\n    getDomains: sharedPhases.getAllAssetsFactory('global.DomainConfig')\n});\n","const sharedPhases = require('./sharedPhases');\n\n$$.transaction.describe(\"Domain\", {\n    add: function (alias, role, workspace, constitution) {\n        let domain = this.transaction.lookup(\"DomainReference\", alias);\n\n        if(!domain){\n            domain = this.transaction.createAsset(\"DomainReference\", \"init\", role, alias);\n        }else{\n            $$.exception(`Domain with ${alias} already exists!`);\n        }\n\n        if(typeof workspace !== \"undefined\"){\n            domain.setWorkspace(workspace);\n        }\n\n        if(typeof constitution !== \"undefined\"){\n            domain.setConstitution(constitution);\n        }\n\n        this.transaction.add(domain);\n        this.onCommit(()=>{\n            this.return(undefined, domain.asJSON());\n        });\n        this.commit();\n    },\n    connectDomainLocally: function(alias, localInterface){\n        let domain = this.transaction.lookup(\"DomainReference\", alias);\n        domain.addLocalInterface('local', localInterface);\n\n        this.transaction.add(domain);\n        this.onCommit(()=>{\n            this.return(undefined, domain.asJSON());\n        });\n        this.commit();\n    },\n    setWorkspaceForDomain: function(alias, workspace){\n        let domain = this.transaction.lookup(\"DomainReference\", alias);\n        domain.setWorkspace(workspace);\n\n        this.transaction.add(domain);\n        this.onCommit(()=>{\n            this.return(undefined, domain.asJSON());\n        });\n        this.commit();\n    },\n    setConstitutionForDomain: function(alias, constitution){\n        let domain = this.transaction.lookup(\"DomainReference\", alias);\n        domain.setConstitution(constitution);\n\n        this.transaction.add(domain);\n        this.onCommit(()=>{\n            this.return(undefined, domain.asJSON());\n        });\n        this.commit();\n    },\n    getDomainDetails:function(alias){\n        let domain = this.transaction.lookup(\"DomainReference\", alias);\n        return domain.toJson();\n    },\n    connectDomainToRemote(domainName, alias, remoteEndPoint){\n        let domain = this.transaction.lookup(\"DomainReference\", domainName);\n        domain.addRemoteInterface(alias, remoteEndPoint);\n\n        this.transaction.add(domain);\n        this.onCommit(()=>{\n            this.return(undefined, domain.asJSON());\n        });\n        this.commit();\n    },\n    setWorkerStrategy: function (alias, workerStrategy) {\n        const domainReference =  this.transaction.lookup(\"DomainReference\", alias);\n        if(!domainReference) {\n            $$.exception(`Domain with alias ${alias} does not exist!`);\n        }\n\n        domainReference.setWorkerStrategy(workerStrategy);\n\n        this.transaction.add(domainReference);\n        this.onCommit(()=>{\n            this.return(undefined, domainReference.asJSON());\n        });\n        this.commit();\n    },\n    setMaximumNumberOfWorkers: function (alias, maximumNumberOfWorkers) {\n        const domainReference =  this.transaction.lookup(\"DomainReference\", alias);\n        if(!domainReference) {\n            $$.exception(`Domain with alias ${alias} does not exist!`);\n        }\n\n        domainReference.setMaximumNumberOfWorkers(maximumNumberOfWorkers);\n\n        this.transaction.add(domainReference);\n        this.onCommit(()=>{\n            this.return(undefined, domainReference.asJSON());\n        });\n        this.commit();\n    },\n    getDomainDetails: sharedPhases.getAssetFactory('global.DomainReference'),\n    getDomains: sharedPhases.getAllAssetsFactory('global.DomainReference')\n});\n","/**\n * FIXME\n * The first block in the blockchain is 0.\n * When creating a CSB, if only one transaction is committed (only one block written) then only the block 0\n * will be written and blocks/index will have the value 0\n * When loading again the CSB, the CSB's blockchain will replay transaction from pulse 0 until 0, currentPulse\n * remaining 0. When creating a new transaction, it will have pulse 0 again and the block 0 will be overwritten.\n *\n * This transaction's purpose is to always start the blockchain with at least one transaction so it will hopefully\n * write at least two blocks in the beginning\n */\n$$.transaction.describe(\"TooShortBlockChainWorkaroundDeleteThis\", {\n    add: function () {\n        this.onCommit(()=>{\n            this.return();\n        });\n        this.commit();\n    }\n});","require('./domainTransaction');\nrequire('./agentTransaction');\nrequire('./standardCSBTransactions');\nrequire('./domainConfigTransaction');\nrequire('./firstTransactionWorkaroundDeleteThis');","module.exports = {\n    getAssetFactory: function(assetType) {\n        return function(alias) {\n            const transaction = $$.blockchain.beginTransaction({});\n            const domainReferenceSwarm = transaction.lookup(assetType, alias);\n\n            if(!domainReferenceSwarm) {\n                this.return(new Error(`Could not find swarm named \"${assetType}\"`));\n                return;\n            }\n\n            this.return(undefined, domainReferenceSwarm.asJSON());\n        }\n    },\n    getAllAssetsFactory: function(assetType) {\n        return function() {\n            const transaction = $$.blockchain.beginTransaction({});\n            const domains = transaction.loadAssets(assetType) || [];\n\n            this.return(undefined, domains.map(domain => domain.asJSON()));\n        };\n    }\n};","$$.transaction.describe(\"StandardCSBTransactions\", {\n    addBarAnchor: function (mountPoint, barMapDigest) {\n        this.transaction.createAsset(\"BarAnchor\", \"init\", mountPoint, barMapDigest);\n        this.commit();\n    },\n\n    addFileAnchor: function (alias, type, seed, digest) {\n        try{\n            let fileAnchor = this.transaction.createAsset(\"FileAnchor\", \"init\", alias, type, seed, digest);\n\n            this.onCommit(() => {\n                this.return(undefined, fileAnchor.asJSON());\n            });\n\n            this.commit();\n\n        }catch(e) {\n            this.return(e.message);\n        }\n    },\n\n    domainLookup: function(alias){\n        try{\n            let fileAnchor = this.transaction.lookup(\"FileAnchor\", alias);\n            this.return(undefined, fileAnchor ? fileAnchor.asJSON() : \"\");\n        }catch(err){\n            this.return(err.message);\n        }\n    },\n    updateFileDigest: function (alias, digest) {\n        const file = this.transaction.lookup(\"FileAnchor\", alias);\n        file.digest = digest;\n        this.transaction.add(file);\n        this.transaction.commit();\n    },\n    getSeed: function (alias) {\n        try {\n            const anchor = this.transaction.lookup(\"FileAnchor\", alias);\n            this.return(undefined, anchor.seed);\n        } catch (e) {\n            this.return(e.message);\n        }\n    }\n});","$$.transaction.describe(\"transactions\", {\n    updateKey: function (key, value) {\n        var transaction = $$.blockchain.beginTransaction(this);\n        var key = transction.lookup(\"Key\", key);\n        var keyPermissions = transaction.lookup(\"ACLScope\", \"KeysConcern\");\n        if (keyPermissions.allow(this.agentId, key)) {\n            key.update(value);\n            transaction.add(key);\n            $$.blockchain.commit(transaction);\n        } else {\n            this.securityError(\"Agent \" + this.agentId + \" denied to change key \" + key);\n        }\n    },\n    addChild: function (alias) {\n        var transaction = $$.blockchain.beginTransaction();\n        var reference = $$.contract.start(\"DomainReference\", \"init\", \"child\", alias);\n        transaction.add(reference);\n        $$.blockchain.commit(transaction);\n    },\n    addParent: function (value) {\n        var reference = $$.contract.start(\"DomainReference\", \"init\", \"child\", alias);\n        this.transaction.save(reference);\n        $$.blockchain.persist(this.transaction);\n    },\n    addAgent: function (alias, publicKey) {\n        var reference = $$.contract.start(\"Agent\", \"init\", alias, publicKey);\n        this.transaction.save(reference);\n        $$.blockchain.persist(this.transaction);\n    },\n    updateAgent: function (alias, publicKey) {\n        let agent = this.transaction.lookup(\"Agent\", alias);\n        agent.update(publicKey);\n        this.transaction.save(agent);\n        $$.blockchain.persist(this.transaction);\n    }\n});\n\n\n$$.newTransaction = function(transactionFlow,ctor,...args){\n    var transaction = $$.swarm.start( transactionFlow);\n    transaction.meta(\"agentId\", $$.currentAgentId);\n    transaction.meta(\"command\", \"runEveryWhere\")\n    transaction.meta(\"ctor\", ctor);\n    transaction.meta(\"args\", args);\n    transaction.sign();\n    //$$.blockchain.sendForConsent(transaction);\n    //temporary until consent layer is activated\n    transaction[ctor].apply(transaction,args);\n}\n\n/*\nusages:\n    $$.newTransaction(\"domain.transactions\", \"updateKey\", \"key\", \"value\")\n\n */\n","module.exports = {\n    ALIAS:\"alias\",\n    ALIASES : '/aliases',\n    SECURITY_PARADIGM:\"SecurityParadigm\",\n    RESTRICTED:\"Restricted\",\n    CONSTITUTIONAL:\"Constitutional\",\n    PREDICATIVE:\"Predicative\",\n    CTOR:\"ctor\",\n    COMMAND_ARGS:\"COMMAND_ARGS\",\n    SIGNING_AGENT:\"SIGNING_AGENT\",\n    INTIALISATION_CONTEXT:\"intialisationContext\",\n    SWARMID:\"swarmId\",\n    SWARMTYPE:\"swarmTypeName\"\n};","module.exports = {\n    createBlockchain:function(worldStateCache, historyStorage, consensusAlgorithm, signatureProvider, loadDefaultConstitution, forcedBoot){\n        return require(\"./pskdb\").startDefaultDB(worldStateCache, historyStorage, consensusAlgorithm, signatureProvider, loadDefaultConstitution, forcedBoot);\n    },\n    createABlockchain:function(worldStateCache, historyStorage, consensusAlgorithm, signatureProvider, loadDefaultConstitution, forcedBoot){\n        return require(\"./pskdb\").startDB(worldStateCache, historyStorage, consensusAlgorithm, signatureProvider, loadDefaultConstitution, forcedBoot);\n    },\n    createHistoryStorage:function(storageType,...args){\n        return require(\"./strategies/historyStorages/historyStoragesRegistry\").createStorage(storageType,...args);\n    },\n    createWorldStateCache:function(storageType,...args){\n        return require(\"./strategies/worldStateCaches/worldStateCacheRegistry\").createCache(storageType,...args);\n    },\n    createConsensusAlgorithm:function(name,...args){\n        return require(\"./strategies/consensusAlgortims/consensusAlgoritmsRegistry\").createAlgorithm(name,...args);\n    },\n    createCRTransaction:function (swarmType, command, input, output, currentPulse) {\n        /*\n            class for Command or Result transactions\n        */\n        function CRTransaction(swarmType, command, input, output, currentPulse) {\n            var pskcrypto = require(\"pskcrypto\");\n\n            this.swarmType = swarmType;\n\n            if(input && output){\n                this.input      = input;\n                this.output     = output;\n            }\n            this.command      = command;\n\n            let arr = process.hrtime();\n            this.second     = arr[0];\n            this.nanosecod  = arr[1];\n            this.transactionPulse = currentPulse;\n            this.digest     = pskcrypto.hashValues(this);\n        }\n\n        return new CRTransaction(swarmType, command, input, output, currentPulse);\n    },\n    createBlock:function (blockset, pulse, previous) {\n        let pskcrypt = require(\"pskcrypto\");\n        var block = {blockset, pulse, previous};\n        block.hash = pskcrypt.hashValues(block);\n        return block;\n    },\n    createSignatureProvider:function(name,...args){\n        return require(\"./strategies/signatureProvidersRegistry/signatureProvidersRegistry\").createSignatureProvider(name,...args);\n    },\n    createNetworkCommunicationStrategy:function(name,...args){\n        return require(\"./strategies/networkCommunication/networkCommunicationStrategiesRegistry\").createNetworkAdapter(name,...args);\n    },\n    createVotingStrategy:function(name,...args){\n        return require(\"./strategies/votingStrategies/votingStrategiesRegistry\").createVotingStrategy(name,...args);\n    }\n}","const bm = require('../moduleExports');\nconst beesHealer = require(\"swarmutils\").beesHealer;\nvar CNST = require(\"../moduleConstants\");\n\nfunction AliasIndex(assetType, pdsHandler, worldStateCache) {\n    this.create = function (alias, uid) {\n        const assetAliases = this.getAliases();\n\n        if (typeof assetAliases[alias] !== \"undefined\") {\n            $$.exception(`Alias ${alias} for assets of type ${assetType} already exists`);\n        }\n\n        assetAliases[alias] = uid;\n\n        worldStateCache.writeKey(assetType + CNST.ALIASES, J(assetAliases));\n    };\n\n    this.getUid = function (alias) {\n        const assetAliases = this.getAliases();\n        //console.log(\"assetAliases\", assetAliases);\n        return assetAliases[alias];\n    };\n\n    this.getAliases = function () {\n        let aliases = worldStateCache.readKey(assetType + CNST.ALIASES);\n        return aliases ? JSON.parse(aliases) : {};\n    }\n}\n\nfunction createLoadAssets(blockchain, pdsHandler, worldStateCache) {\n    return function (assetType) {\n        assetType = $$.fixSwarmName(assetType);\n        const assets = [];\n\n        const aliasIndex = new AliasIndex(assetType, pdsHandler, worldStateCache);\n        Object.keys(aliasIndex.getAliases()).forEach(alias => {\n            assets.push(blockchain.lookup(assetType, alias));\n        });\n\n        return assets;\n    };\n}\n\nfunction createLookup(blockchain, pdsHandler, SPRegistry, worldStateCache) {\n    function hasAliases(spaceName) {\n        let ret = !!worldStateCache.readKey(spaceName + CNST.ALIASES);\n        return ret;\n    }\n\n    return function (assetType, aid) { // aid == alias or id\n\n        let localUid = aid;\n        assetType = $$.fixSwarmName(assetType);\n\n        if (hasAliases(assetType)) {\n            const aliasIndex = new AliasIndex(assetType, pdsHandler, worldStateCache);\n            localUid = aliasIndex.getUid(aid) || aid;\n        }\n\n        const value = pdsHandler.readKey(assetType + '/' + localUid, true);\n\n        if (!value) {\n            $$.log(\"Lookup fail, asset not found: \", assetType, \" with alias\", aid, value);\n            //pdsHandler.dump();\n            //return $$.asset.start(assetType);\n            return null;\n        } else {\n            const asset = $$.asset.continue(assetType, JSON.parse(value));\n            asset.__reinit(blockchain);\n            return asset;\n        }\n    };\n}\n\nfunction Blockchain(pskdb, consensusAlgorithm, worldStateCache, signatureProvider) {\n    let spr = require(\"./securityParadigms/securityParadigmRegistry\").getRegistry(this);\n    let self = this;\n\n    consensusAlgorithm.setPSKDB(pskdb);\n\n    this.beginTransaction = function (transactionSwarm, handler) {\n        if (!transactionSwarm) {\n            $$.exception(\"Can't begin a transaction outside of a swarm instance from transactions namespace\");\n        }\n        if (!handler) {\n            handler = pskdb.getHandler();\n        }\n        return new Transaction(self, handler, transactionSwarm, worldStateCache, spr);\n    };\n\n\n    this.start = function (reportBootingFinishedCallback) {\n        pskdb.initialise(function (err, res) {\n            reportBootingFinishedCallback(err, self);\n        });\n    };\n\n\n    this.lookup = function (assetType, aid) {\n        let newLookup = createLookup(self, pskdb.getHandler(), spr, worldStateCache);\n        return newLookup(assetType, aid);\n    };\n\n    this.loadAssets = createLoadAssets(self, pskdb.getHandler(), worldStateCache);\n\n    this.getSPRegistry = function () {\n        return spr;\n    };\n\n    this.signAs = function (agentId, msg) {\n        return signatureProvider.signAs(agentId, msg);\n    };\n\n    this.verifySignature = function (msg, signatures) {\n        return signatureProvider.verify(msg, signatures);\n    };\n\n\n    this.registerSecurityParadigm = function (SPName, apiName, factory) {\n        return spr.register(SPName, apiName, factory);\n    };\n\n\n    this.startCommandAs = function (agentId, transactionSwarmType, ...args) {\n        let t = bm.createCRTransaction(transactionSwarmType, args, null, null, consensusAlgorithm.getCurrentPulse());\n        t.signatures = [this.signAs(agentId, t.digest)];\n        consensusAlgorithm.commit(t);\n    };\n\n    this.startTransactionAs = function (agentId, transactionSwarmType, ...args) {\n        let swarm = $$.transaction.startWithContext(self, transactionSwarmType, ...args);\n        swarm.setMetadata(CNST.COMMAND_ARGS, args);\n        swarm.setMetadata(CNST.SIGNING_AGENT, agentId);\n        return swarm;\n        //console.log(swarm);\n    };\n\n    this.commit = function (transaction, callback) {\n        let swarm = transaction.getSwarm();\n        let handler = transaction.getHandler();\n        const diff = handler.computeSwarmTransactionDiff(swarm);\n        //console.log(\"Diff is\", diff.output);\n        const t = bm.createCRTransaction(swarm.getMetadata(\"swarmTypeName\"), swarm.getMetadata(CNST.COMMAND_ARGS), diff.input, diff.output, consensusAlgorithm.getCurrentPulse());\n        t.signatures = [self.signAs(swarm.getMetadata(CNST.SIGNING_AGENT), t.digest)];\n        consensusAlgorithm.commit(t, callback);\n    };\n\n    this.onceAllCommitted = pskdb.onceAllCommitted;\n\n    this.dump = function () {\n        pskdb.getHandler().dump();\n    };\n}\n\nfunction Transaction(blockchain, pdsHandler, transactionSwarm, worldStateCache, spr) {\n\n    let self = this;\n\n    this.getSwarm = function () {\n        return transactionSwarm;\n    };\n\n    this.getHandler = function () {\n        return pdsHandler;\n    };\n\n    this.add = function (asset) {\n        const swarmTypeName = asset.getMetadata('swarmTypeName');\n        const swarmId = asset.getMetadata('swarmId');\n\n        const aliasIndex = new AliasIndex(swarmTypeName, pdsHandler, worldStateCache);\n        if (asset.alias && aliasIndex.getUid(asset.alias) !== swarmId) {\n            aliasIndex.create(asset.alias, swarmId);\n        }\n\n\n        const serializedSwarm = beesHealer.asJSON(asset, null, null);\n        pdsHandler.writeKey(swarmTypeName + '/' + swarmId, J(serializedSwarm));\n    };\n\n    this.lookup = createLookup(blockchain, pdsHandler, spr, worldStateCache);\n\n    this.loadAssets = createLoadAssets(blockchain, pdsHandler, worldStateCache);\n\n    this.createAsset = function (swarmTypeName, ctor, ...args) {\n        let asset = $$.assets.startWithContext(blockchain, swarmTypeName, ctor, ...args);\n        this.add(asset);\n        return asset;\n    };\n\n    this.reviveAsset = function (assetValue) {\n        let asset = $$.assets.continue(assetValue);\n        asset.__reinit(self);\n        return asset;\n    };\n\n\n    this.commit = function () {\n        blockchain.commit(self);\n    };\n}\n\nmodule.exports = Blockchain;","const Blockchain = require('./Blockchain');\n\nmodule.exports = {\n    startDB: function (worldStateCache, historyStorage, consensusAlgorithm, signatureProvider, loadDefaultConstitution) {\n        if(loadDefaultConstitution){\n            require('../defaultConstitution/assets/index');\n            require('../defaultConstitution/swarms/index');\n            require('../defaultConstitution/transactions/index');\n        }\n        let pds = require('./pskdb').newPSKDB(worldStateCache, historyStorage);\n        consensusAlgorithm.pskdb = pds;\n        let blockchain = new Blockchain(pds, consensusAlgorithm, worldStateCache, signatureProvider);\n        pds.blockchain = blockchain;\n        return blockchain;\n    },\n    startDefaultDB: function (worldStateCache, historyStorage, consensusAlgorithm, signatureProvider, loadDefaultConstitution, forceReboot) {\n        if ($$.blockchain && !forceReboot) {\n            $$.exception('$$.blockchain is already defined. Throwing an exception!');\n        }\n        if(!worldStateCache || !historyStorage || !consensusAlgorithm || !signatureProvider){\n            console.error(\"Initialisation failed with arguments:\", worldStateCache, historyStorage, consensusAlgorithm, signatureProvider);\n            $$.exception('$$.blockchain initialisation failed! Throwing an exception!');\n        }\n        $$.blockchain = this.startDB(worldStateCache, historyStorage, consensusAlgorithm, signatureProvider, loadDefaultConstitution);\n        return $$.blockchain;\n    }\n};\n","let CNST = require(\"../moduleConstants\");\nlet cutil = require(\"../OBFT/transactionsUtil\");\n// let bm = require(\"../moduleExports\");\n\n//var ssutil  = require(\"pskcrypto\");\n\n\nfunction KeyValueDBWithVersions(worldStateCache) { //main storage\n    let cset = {};  // contains all keys\n    let keyVersions = {};  //will store versions\n    let self = this;\n\n    this.dump = function () {\n        //console.log(\"Main Storage\", {keyVersions,cset})\n        worldStateCache.dump();\n    };\n\n    this.readKey = function (keyName, mandatoryToExist) {\n        if (keyVersions.hasOwnProperty(keyName)) {\n            return cset[keyName];\n        }\n        if (mandatoryToExist) {\n            keyVersions[keyName] = 0;\n        }\n        return undefined;\n    };\n\n    this.writeKey = function (keyName, value, newVersion) {\n\n        if (keyVersions.hasOwnProperty(keyName)) {\n            if (!newVersion) {\n                keyVersions[keyName]++;\n            } else {\n                keyVersions[keyName] = newVersion;\n            }\n        } else {\n            keyVersions[keyName] = 0;\n        }\n        cset[keyName] = value;\n    };\n\n    this.version = function (keyName) {\n        if (keyVersions.hasOwnProperty(keyName)) {\n            return keyVersions[keyName];\n        }\n        return undefined;\n    };\n\n    this.getInternalValues = function (currentPulse) {\n        return {\n            cset,\n            versions: keyVersions,\n            currentPulse\n        }\n    }\n}\n\nfunction DBTransactionHandler(parentStorage) {\n    let readSetVersions = {}; //version of a key when read first time\n    let writeSet = {};  //contains only keys modified in handlers\n\n    this.dump = function () {\n        console.log(\"DBTransactionHandler:\", {readSetVersions, writeSet});\n        parentStorage.dump();\n    };\n\n    this.readKey = function (keyName, mandatoryToExist) {\n        function internalReadKey() {\n            if (readSetVersions.hasOwnProperty(keyName)) {\n                return writeSet[keyName];\n            }\n            let version = parentStorage.version(keyName);\n            if (version != undefined) {\n                readSetVersions[keyName] = version;\n            }\n            return parentStorage.readKey(keyName);\n        }\n\n        let result = internalReadKey();\n        //writeSet[keyName] = result;\n\n        /*\n        if(mandatoryToExist){\n            console.debug(\"Looking for \", keyName, \" Version:\", parentStorage.version(keyName), \"Result:\", result);\n        }\n        if(!result && mandatoryToExist){\n            console.error(\"Found nothing for\", keyName, \"Key Version:\", parentStorage.version(keyName));\n            this.dump();\n            $$.exception(\"Mandatory key not found:\" + keyName);\n        }*/\n        return result;\n    };\n\n    this.writeKey = function (keyName, value) {\n        this.readKey(keyName);         //save read version\n        writeSet[keyName] = value;\n    };\n\n    this.computeSwarmTransactionDiff = function () {\n        return {\n            input: readSetVersions,\n            output: writeSet\n        };\n    };\n}\n\n\nfunction PSKDB(worldStateCache, historyStorage) {\n    this.blockchain = undefined;\n    let mainStorage = new KeyValueDBWithVersions(worldStateCache);\n    let self = this;\n\n    let currentPulse = 0;\n    let hashOfLatestCommittedBlock = \"Genesis Block\";\n\n    this.getHandler = function () { // the single way of working with pskdb\n        let tempStorage = new DBTransactionHandler(mainStorage);\n        return tempStorage;\n    };\n\n    this.getCurrentPulse = function () {\n        return currentPulse;\n    };\n\n    this.setCurrentPulse = function (cp) {\n        currentPulse = cp;\n    };\n\n    this.getPreviousHash = function () {\n        return hashOfLatestCommittedBlock;\n    };\n\n    this.initialise = function (reportResultCallback) {\n        let gotLatestBlock_done = false;\n        let gotState_done = false;\n        let lbn = 0;\n        let state = 0;\n        let cp = 0;\n\n        function loadNextBlock() {\n            if (cp > lbn) {\n                if (lbn != 0) {\n                    currentPulse = cp;\n                }\n                reportResultCallback(null, lbn);\n            } else {\n                historyStorage.loadSpecificBlock(cp, function (err, block) {\n                    if (block) {\n                        self.commitBlock(block, true, (err) => {\n                            if(err) {\n                                reportResultCallback(err);\n                                return;\n                            }\n                            cp = block.pulse;\n\n                            cp++;\n                            loadNextBlock();\n                        });\n                    } else {\n                        cp++;\n                        loadNextBlock();\n                    }\n                })\n            }\n        }\n\n        function loadMissingBlocksFromHistory() {\n            if (gotState_done && gotLatestBlock_done) {\n                if (state && state.pulse) {\n                    cp = state.pulse;\n                }\n                console.log(\"Reloading from cache at pulse \", cp, \"and rebuilding state until pulse\", lbn);\n                if (state.pulse) {\n                    mainStorage.initialiseInternalValue(state);\n                }\n                loadNextBlock();\n            }\n        }\n\n        function gotLatestBlock(err, val) {\n            gotLatestBlock_done = true;\n            if (!err) {\n                lbn = val;\n            }\n            loadMissingBlocksFromHistory();\n        }\n\n        function gotState(err, val) {\n            gotState_done = true;\n\n            if (!err) {\n                state = val;\n            }\n            if (state.latestBlockHash) {\n                hashOfLatestCommittedBlock = state.latestBlockHash;\n            }\n            loadMissingBlocksFromHistory();\n        }\n\n        worldStateCache.getState(gotState);\n        historyStorage.getLatestBlockNumber(gotLatestBlock);\n    };\n\n\n    this.commitBlock = function (block, doNotSaveHistory, callback) {\n        incrementCommitsNumber();\n        let blockSet = block.blockset;\n        currentPulse = block.pulse;\n\n        let verificationKeySpace = new VerificationKeySpaceHandler(mainStorage, worldStateCache, this.blockchain);\n\n        verificationKeySpace.commit(blockSet);\n\n        hashOfLatestCommittedBlock = block.hash;\n        if (!doNotSaveHistory) {\n            historyStorage.appendBlock(block, false, (err) => {\n                if (err) {\n                    return callback(err);\n                }\n\n                __updateState();\n            });\n        } else {\n            __updateState()\n        }\n\n        function __updateState() {\n            let internalValues = mainStorage.getInternalValues(currentPulse);\n            internalValues.latestBlockHash = block.hash;\n            worldStateCache.updateState(internalValues, (...args) => {\n                callback(...args);\n                decrementCommitsNumber();\n            });\n        }\n    };\n\n    this.computePTBlock = function (nextBlockSet) {\n        let tempStorage = new VerificationKeySpaceHandler(mainStorage, worldStateCache, this.blockchain);\n        return tempStorage.computePTBlock(nextBlockSet);\n    };\n\n    const notifyCommittedCallbacks = [];\n    let commitsInProgress = 0;\n    this.onceAllCommitted = function (callback) {\n        notifyCommittedCallbacks.push(callback);\n    };\n\n    function incrementCommitsNumber() {\n        commitsInProgress += 1;\n    }\n\n    function decrementCommitsNumber() {\n        commitsInProgress -= 1;\n\n        if(commitsInProgress === 0) {\n            notifyCommitted();\n        }\n    }\n\n    function notifyCommitted() {\n        for (const callback of notifyCommittedCallbacks) {\n            callback();\n        }\n\n        notifyCommittedCallbacks.splice(0, notifyCommittedCallbacks.length);\n    }\n\n    /* Verification Space Digest is now the hash of the latest commited block*/\n    this.getHashLatestBlock = historyStorage.getHashLatestBlock;\n}\n\nlet lec = require(\"./securityParadigms/localExecutionCache\");\n\n/* play the role of DBTransactionHandler (readKey, writeKey) while also doing transaction validation*/\nfunction VerificationKeySpaceHandler(parentStorage, worldStateCache, blockchain) {\n    let readSetVersions = {}; //version of a key when read first time\n    let writeSetVersions = {}; //increment version with each writeKey\n    let writeSet = {};  //contains only keys modified in handlers\n    let self = this;\n\n    let aliases = {};\n\n    this.dump = function () {\n        console.log(\"VerificationKeySpaceHandler:\", {readSetVersions, writeSetVersions, writeSet});\n        parentStorage.dump();\n    };\n\n\n    this.readKey = function (keyName) {\n        if (writeSetVersions.hasOwnProperty(keyName)) {\n            return writeSet[keyName];\n        }\n        readSetVersions[keyName] = parentStorage.version(keyName);\n        return parentStorage.readKey(keyName);\n    };\n\n    this.saveAlias = function (assetType, alias, swarmId) {\n        aliases[swarmId] = {assetType, alias};\n    };\n\n    this.writeKey = function (keyName, value) {\n        this.readKey(keyName);         //save read version\n        if (!writeSetVersions.hasOwnProperty(keyName)) {\n            writeSetVersions[keyName] = readSetVersions[keyName];\n        }\n        writeSetVersions[keyName]++;\n        writeSet[keyName] = value;\n    };\n\n    this.version = function (keyName) {\n        if (writeSetVersions.hasOwnProperty(keyName)) {\n            return writeSetVersions[keyName];\n        }\n        return parentStorage.version(keyName);\n    };\n\n    function applyTransaction(t, willBeCommited) {\n        let ret = true;\n        lec.ensureEventTransaction(t);\n        for (let k in t.input) {\n            let transactionVersion = t.input[k];\n            if (transactionVersion == undefined) {\n                transactionVersion = 0;\n            }\n            let currentVersion = self.version(k);\n            if (currentVersion == undefined || currentVersion == null) {\n                currentVersion = 0;\n            }\n            if (transactionVersion != currentVersion) {\n                //console.log(k, transactionVersion , currentVersion);\n                //ret = \"Failed to apply in transactionVersion != currentVersion (\" + transactionVersion + \"!=\"+ currentVersion + \")\";\n                return false;\n            }\n        }\n\n        //TODO: potential double spending bug if a transaction was replaced\n        if (!lec.verifyTransaction(t, self, willBeCommited, blockchain)) {\n            return false;\n        }\n\n        for (let k in t.output) {\n            self.writeKey(k, t.output[k]);\n        }\n\n        /* who has this responsability?\n        if(willBeCommited){\n            lec.removeFromCacheAtCommit(t);\n        }*/\n        return ret;\n    }\n\n    this.computePTBlock = function (nextBlockSet) {   //make a transactions block from nextBlockSet by removing invalid transactions from the key versions point of view\n        let validBlock = [];\n        let orderedByTime = cutil.orderCRTransactions(nextBlockSet);\n        let i = 0;\n\n        while (i < orderedByTime.length) {\n            let t = orderedByTime[i];\n            if (applyTransaction(t)) {\n                validBlock.push(t.digest);\n            }\n            i++;\n        }\n\n\n        return validBlock;\n    };\n\n    this.commit = function (blockSet, reportDropping) {\n        let i = 0;\n        let orderedByTime = cutil.orderCRTransactions(blockSet);\n\n        while (i < orderedByTime.length) {\n            let t = orderedByTime[i];\n            if (applyTransaction(t, true) && reportDropping) {\n                $$.log(\"Dropping transaction\", t);\n            }\n\n            i++;\n        }\n\n        for (let v in writeSetVersions) {\n            parentStorage.writeKey(v, writeSet[v], writeSetVersions[v]);\n        }\n\n        worldStateCache.updateAliases(aliases);\n    }\n}\n\n\nexports.newPSKDB = function (worldStateCache, historyStorage) {\n    return new PSKDB(worldStateCache, historyStorage);\n};","let CNST=require(\"../../moduleConstants\");\nlet cache = {};\n\nlet alreadyVerified = {\n\n};\n\nfunction sandBoxedExecution(cet){\n    let transactionType = cet.swarmType;\n    $$.transactions.start(\"\")\n}\n\nmodule.exports = {\n    ensureEventTransaction:function(cetransaction){\n        return cetransaction;\n    },\n    verifyTransaction:function(t, handler, forceDeepVerification, blockchain){\n\n        //todo: to be removed later; modification done in the same time with the mod in pskdb\n        return true;\n\n        let old_assets = {};\n        let new_assets = {};\n        let fastCheck = true;\n\n        if(!forceDeepVerification){\n            let t = cache[t.digest];\n            if(typeof t != undefined) return true;\n        }\n\n        for(let k in t.output){\n            new_assets[k] = {};\n            old_assets[k] = {};\n\n            let  old_value = handler.readKey(k);\n            let  new_value = t.output[k];\n\n            let assetValue = JSON.parse(new_value);\n\n            let asset = $$.assets.continue(assetValue);\n            asset.__reinit(blockchain);\n\n            new_assets[k][asset.getSwarmId()] = asset;\n            handler.saveAlias(asset.getSwarmType(), asset.alias, asset.getSwarmId());\n\n            if(old_value !== undefined){\n                /* undefined for new asset (did not exist before current transaction)*/\n                let assetValue = JSON.parse(old_value);\n                let asset = $$.assets.continue(assetValue);\n                asset.__reinit(blockchain);\n                if(asset.securityParadigm.mainParadigm == CNST.CONSTITUTIONAL){\n                    fastCheck = false;\n                }\n                old_assets[k][asset.getSwarmId()] = asset;;\n            }\n            //else ... force constitutional checks?\n        }\n\n        return true; //TODO: implement proper checks\n\n        if(fastCheck){\n            //check the signatures or other rules specified in security paradigms\n        } else {\n            //execute transaction again and see if the results are identical\n        }\n        cache[t.digest] = t;\n        return true;\n    },\n    removeFromCacheAtCommit:function(t){\n        delete alreadyVerified[t.digest];\n        delete cache[t.digest];\n    }\n};\n","\nvar CNST = require(\"../../moduleConstants\");\n\nfunction ConstitutionalSPFactory(){\n     this.constitutional = function(spm, optionalTransactionName){\n         spm.mainParadigm = CNST.CONSTITUTIONAL;\n         if(optionalTransactionName){\n             spm.data[CNST.CONSTITUTIONAL] = optionalTransactionName;\n             $$.notImplemented(\"optionalTransactionName is not properly implemented yet\")\n         }\n         //spm.addSecurityParadigm(CNST.CONSTITUTIONAL ,optionalTransactionName);\n     }\n\n    /* we do not instantiate SPs... but anyway it behaves as some sort of factory in an virtual way of instantiation*/\n    this.checkInsideTransactionValidation = function(transaction, asset){\n\n    }\n}\n\nfunction PredicativeSPFactory(){\n    let predicates = {};\n    this.addPredicate = function(spm, predicateName, predicateDefinition){\n        predicates[predicateName] = predicateDefinition;\n        spm.mainParadigm = CNST.PREDICATIVE;\n        spm.data[CNST.PREDICATIVE] = predicateName;\n    }\n    /* not allowed for now... maybe in future*/\n    this.registerPredicate = function(predicateName, predicateFunction){\n\n    }\n\n    /* */\n    this.checkInsideTransactionValidation = function(transaction, asset){\n\n    }\n}\n\nfunction RestrictedSPFactory(){\n    this.allow = function(spm, agentId){\n        spm.mainParadigm = CNST.RESTRICTED;\n        if(!spm.data[CNST.RESTRICTED]) {\n            spm.data[CNST.RESTRICTED] = [agentId];\n        } else {\n            spm.data[CNST.RESTRICTED].push(agentId);\n        }\n    }\n\n    this.checkInsideTransactionValidation = function(transaction, asset){\n\n    }\n\n}\n\n\nfunction mkApi(sp, APIName, factory){\n    return function(...args){\n        return factory[APIName](sp, ...args);\n    }\n}\n\nfunction SecurityParadigmMetadata(assetInstance,metaData, apiNames, allFactories){\n    if(metaData != undefined){\n        for(let v in metaData){\n            this[v] =  metaData[v];\n        }\n    } else {\n        this.mainParadigm = CNST.RESTRICTED;\n        this.data = {};\n    }\n\n    //could be refined to add better restrictions\n    for(let v in apiNames){\n        this[apiNames[v]] = mkApi(this, apiNames[v], allFactories[v]);\n    }\n    assetInstance.setMetadata(\"SecurityParadigm\", this);\n}\n\n\nfunction Registry(blockchain){\n    let allFactories = {};\n    let apiNames = {};\n    let self = this;\n    this.register = function (SPName, apiName, factory) {\n        allFactories[SPName]         = factory;\n        apiNames[SPName]    = apiName;\n    }\n\n    this.getSecurityParadigm = function(assetInstance){\n        let  metaData = assetInstance.getMetadata(CNST.SECURITY_PARADIGM);\n        return new SecurityParadigmMetadata(assetInstance, metaData, apiNames, allFactories);\n    }\n\n    self.register(CNST.CONSTITUTIONAL ,\"constitutional\", new ConstitutionalSPFactory());\n    self.register(CNST.RESTRICTED,\"allow\", new RestrictedSPFactory());\n    self.register(CNST.PREDICATIVE ,\"addPredicate\", new PredicativeSPFactory());\n\n    this.validateTransaction = function(currentLayer, transaction){\n\n    }\n}\n\nmodule.exports = {\n    getRegistry: function () {\n        /* normally should be called only once, made it more open for tests only...*/\n        return new Registry();\n    }\n}","let pskcrypto = require(\"pskcrypto\");\nlet fs = require(\"fs\");\n\nlet consUtil = require(\"../OBFT/transactionsUtil\");\n\nlet detailedDebug = false;\n\n\nlet pulseSwarm = $$.flow.describe(\"pulseSwarm\", {\n    start: function (delegatedAgentName, communicationOutlet, pdsAdapter, pulsePeriodicity, votingBox) {\n\n        this.lset = {}; // digest -> transaction - localy generated set of transactions (`createTransactionFromSwarm` stores each transaction; `beat` resets `lset`)\n        this.dset = {}; // digest -> transaction - remotely delivered set of transactions that will be next participate in consensus\n        this.pset = {}; // digest -> transaction - consensus pending set\n\n        this.currentPulse = 0;\n        this.topPulseConsensus = 0;\n        this.lastPulseAchievedConsensus = 0;\n\n        this.pulsesHistory = {};\n\n        this.vsd = pdsAdapter.getHashLatestBlock();\n\n\n        this.commitCounter = 0;                 // total  number of transactions that got commited\n\n        this.nodeName               = delegatedAgentName;\n        this.communicationOutlet    = communicationOutlet;\n        this.pdsAdapter             = pdsAdapter;\n        this.pulsePeriodicity       = pulsePeriodicity;\n        this.votingBox              = votingBox;\n\n        this.beat();\n    },\n\n    beat: function () {\n        let ptBlock = null;\n        let nextConsensusPulse = this.topPulseConsensus + 1;\n        let majoritarianVSD = \"none\";\n\n        while (nextConsensusPulse <= this.currentPulse) {\n            ptBlock = consUtil.detectMajoritarianPTBlock(nextConsensusPulse, this.pulsesHistory, this.votingBox);\n            majoritarianVSD = consUtil.detectMajoritarianVSD(nextConsensusPulse, this.pulsesHistory, this.votingBox);\n\n            if (ptBlock != \"none\" && this.vsd == majoritarianVSD) {\n                if (!this.hasAllTransactions(ptBlock)) {\n                    this.print(\"Unknown transactions detected...\")\n                    break;\n                }\n                //console.log(this.nodeName, ptBlock.length,this.vsd, majoritarianVSD, nextConsensusPulse);\n                if (ptBlock.length /*&& this.hasAllTransactions(ptBlock)*/) {\n                    this.pset = consUtil.setsConcat(this.pset, this.dset);\n                    this.dset = {};\n                    let resultSet = consUtil.makeSetFromBlock(this.pset, ptBlock);\n\n                    this.commitCounter += ptBlock.length;\n                    //this.print(\"\\t\\tBlock [\" + this.dumpPtBlock(ptBlock) + \"] at pulse \" + nextConsensusPulse + \" and VSD \" +  this.vsd.slice(0,8));\n\n                    this.pdsAdapter.commit(resultSet);\n                    let topDigest = ptBlock[ptBlock.length - 1];\n                    this.topPulseConsensus = this.pset[topDigest].transactionPulse;\n                    consUtil.setsRemovePtBlockAndPastTransactions(this.pset, ptBlock, this.topPulseConsensus); //cleanings\n                    let oldVsd = this.vsd;\n                    this.vsd = this.pdsAdapter.getVSD();\n\n                    this.lastPulseAchievedConsensus = nextConsensusPulse;   //safer than `this.currentPulse`!?\n                    //this.topPulseConsensus = nextConsensusPulse;\n\n                    this.print(\"\\t\\t consensus at pulse \" + nextConsensusPulse + \" and VSD \" + oldVsd.slice(0, 8));\n                } else {\n                    this.pset = consUtil.setsConcat(this.pset, this.dset);\n                    this.dset = {};\n                    this.lastPulseAchievedConsensus = nextConsensusPulse;   //safer than `this.currentPulse`!?\n                    this.topPulseConsensus = nextConsensusPulse;\n                    //this.print(\"\\t\\tEmpty \" + \" at: \" + nextConsensusPulse );\n                    //console.log(\"\\t\\tmajoritarian \", majoritarianVSD.slice(0,8) , nextConsensusPulse);\n                }\n                break; //exit WHILE\n\n            } //end if (ptBlock != \"none\" && this.vsd == majoritarianVSD)\n\n            nextConsensusPulse++;\n        } //end while\n\n\n        //daca nu a reusit,ar trebui sa vada daca nu exista un alt last majoritar\n        ptBlock = this.pdsAdapter.computePTBlock(this.pset);\n\n        let newPulse = consUtil.createPulse(\n            this.nodeName,                          //==> Pulse.signer\n            this.currentPulse,\n            ptBlock,\n            this.lset,\n            this.vsd,\n            this.topPulseConsensus,\n            this.lastPulseAchievedConsensus);\n\n        //console.log(\"\\t\\tPulse\", this.nodeName, this.vsd.slice(0,8) );\n        //this.print(\"Pulse\" );\n        this.recordPulse(newPulse);\n\n        let self = this;\n        self.communicationOutlet.broadcastPulse(newPulse);\n        \n        this.lset = {};\n        this.currentPulse++;\n\n        setTimeout(this.beat, this.pulsePeriodicity);   //self invocation of phase `beat`\n    },\n    hasAllTransactions: function (ptBlock) {\n        for (let i = 0; i < ptBlock.length; i++) {\n            let item = ptBlock[i];\n            if (!this.pset.hasOwnProperty(item)) {\n                //TODO: ask for the missing transaction\n                return false;\n            }\n        }\n        return true;\n    },\n    receiveTransaction: function (t) {\n        this.lset[t.digest] = t;\n        return t;\n    },\n    /**\n     *\n     * @param {Pulse} pulse e.g. new Pulse(this.nodeName, this.currentPulse, ......)\n     */\n    recordPulse: function (pulse) {\n        let from = pulse.signer;\n\n        if (!pulse.ptBlock) {\n            pulse.ptBlock = [];\n        }\n        //pulse.blockDigest = pskcrypto.hashValues(pulse.ptBlock);\n        //pulse.blockDigest = pulse.ptBlock.blockDigest;\n\n        if (!this.pulsesHistory[pulse.currentPulse]) {\n            this.pulsesHistory[pulse.currentPulse] = {};\n        }\n        this.pulsesHistory[pulse.currentPulse][from] = pulse;\n\n        if(pulse.currentPulse >= this.topPulseConsensus) {\n            if (pulse.currentPulse <= this.lastPulseAchievedConsensus) {\n                for (let d in pulse.lset) {\n                    this.pset[d] = pulse.lset[d];// could still be important for consensus\n                }\n            } else {\n                for (let d in pulse.lset) {\n                    this.dset[d] = pulse.lset[d];\n                }\n            }\n        }\n        //TODO: ask for pulses that others received but we failed to receive\n    },\n\n    dumpPtBlock: function (ptBlock) {\n        return ptBlock.map(function (item) {\n            return item.slice(0, 8);\n        }).join(\" \");\n    },\n    dump: function () {\n        // this.print(\"Final\");\n    },\n    print: function (str) {\n        if (!detailedDebug) {\n            if (str === \"Pulse\") return;\n        }\n\n        if (!str) {\n            str = \"State \"\n        }\n\n        function countSet(set) {\n            let l = 0;\n            for (let v in set) l++;\n            return l;\n        }\n\n        console.log(this.nodeName, \" | \", str, \" | \",\n            \"currentPulse:\", this.currentPulse, \"top:\", this.topPulseConsensus, \"LPAC:\", this.lastPulseAchievedConsensus, \"VSD:\", this.vsd.slice(0, 8),\n            \" | \", countSet(this.pset), countSet(this.dset), countSet(this.lset),\n            \" | \", this.commitCounter / GLOBAL_MAX_TRANSACTION_TIME, \" tranzactii pe secunda. Total tranzactii comise:\", this.commitCounter);\n\n    },\n    printState: function () {\n        console.log(this.nodeName, \",\", this.currentPulse, \",\", this.vsd);\n    },\n    printPset: function () {\n        function sortedDigests(set) {\n            let res = [];\n            for (let d in set) {\n                res.push(d);\n            }\n            return pskcrypto.hashValues(res.sort());\n        }\n        function appendToCSV(filename, arr) {\n            const reducer = (accumulator, currentValue) => accumulator + \" , \" + currentValue;\n            let str = arr.reduce(reducer, \"\") + \"\\n\";\n            fs.appendFileSync(filename, str);\n        }\n\n        let arr = [\n            this.nodeName,\n            this.currentPulse,\n            this.topPulseConsensus,\n            this.lastPulseAchievedConsensus,\n            sortedDigests(this.pset),\n            sortedDigests(this.dset),\n            sortedDigests(this.lset),\n            this.vsd\n        ];\n        appendToCSV(\"data.csv\", arr);\n        // console.log(this.nodeName,\",\",this.currentPulse,\",\",Object.keys(this.pset).length);\n    }\n});\n\n\n/**\n * @param {String} delegatedAgentName e.g. 'Node 0', or 'agent_007'\n * @param {Object} communicationOutlet e.g. object to be used in phase `beat` of the returned \"pulseSwarm\" flow\n *  - it should have a property: `broadcastPulse`: function(from, pulse) {...}\n *      - {String} `from` e.g. `delegatedAgentName`\n *      - {Pulse} `pulse` (see 'transactionsUtil.js')\n * @param {InMemoryPDS} pdsAdapter e.g. require(\"pskdb/lib/InMemoryPDS\").newPDS(null);\n * @param {Number} pulsePeriodicity e.g. 300\n * \n * @returns {SwarmDescription} A new instance of \"pulseSwarm\" flow, with phase `start` already running\n */\nexports.createConsensusManager = function (delegatedAgentName, communicationOutlet, pdsAdapter, pulsePeriodicity, votingBox) {\n    let instance = pulseSwarm();\n    instance.start(delegatedAgentName, communicationOutlet, pdsAdapter, pulsePeriodicity, votingBox);\n    return instance;\n}\n","var mod = require(\"../../moduleExports\");\n\nfunction DirectCommitAlgorithm() {\n    let pskdb = null;\n    this.setPSKDB = function (_pskdb) {\n        pskdb = _pskdb;\n    };\n    this.commit = function (transaction, callback) {\n        const set = {};\n        let cp = this.pskdb.getCurrentPulse();\n        set[transaction.digest] = transaction;\n        this.pskdb.commitBlock(mod.createBlock(set, cp, this.pskdb.getPreviousHash()), false, callback);\n\n        cp++;\n        this.pskdb.setCurrentPulse(cp);\n    };\n\n    this.getCurrentPulse = function () {\n        return this.pskdb.getCurrentPulse();\n    }\n}\n\n\nfunction SignSensusAlgoritm(nodeName, networkImplementation, pulsePeriodicity, votingBox) {\n    let pskdb = null;\n    let algorithm = null;\n    this.setPSKDB = function (_pskdb) {\n        pskdb = _pskdb;\n        algorithm = require(\"../../signsensus/SignSensusImplementation\").createConsensusManager(nodeName, networkImplementation, pskdb, pulsePeriodicity, votingBox);\n        this.recordPulse = algorithm.recordPulse;\n        console.log(\"Setting pskdb for algorithm\")\n    };\n\n    this.commit = function (transaction) {\n        algorithm.sendLocalTransactionToConsensus(transaction);\n    };\n\n    this.getCurrentPulse = function () {\n        return algorithm.currentPulse;\n    }\n}\n\n\nfunction OBFTAlgoritm(nodeName, networkImplementation, pulsePeriodicity, latency, votingBox) {\n    let pskdb = null;\n    let algorithm = null;\n    this.setPSKDB = function (_pskdb) {\n        pskdb = _pskdb;\n        algorithm = require(\"../../OBFT/OBFTImplementation\").createConsensusManager(nodeName, networkImplementation, pskdb, pulsePeriodicity, latency, votingBox);\n        this.recordPulse = algorithm.recordPulse;\n        console.log(\"Setting pskdb for algorithm\")\n    };\n\n    this.commit = function (transaction) {\n        algorithm.sendLocalTransactionToConsensus(transaction);\n    };\n\n    this.getCurrentPulse = function () {\n        return algorithm.currentPulse;\n    }\n}\n\nmodule.exports = {\n    createAlgorithm: function (name, ...args) {\n        switch (name) {\n            case \"direct\":\n                return new DirectCommitAlgorithm(...args);\n            case \"SignSensus\":\n                return new SignSensusAlgoritm(...args);\n            case \"OBFT\":\n                return new OBFTAlgoritm(...args);\n            default:\n                $$.exception(\"Unknown consensus algortihm  \" + name);\n        }\n    }\n};","const LatestHashTracker = require(\"./LatestHashTracker\");\n\nfunction BarHistoryStorage(archive) {\n    const blocksPath = \"blocks\";\n    let lht = new LatestHashTracker();\n\n    this.getHashLatestBlock = lht.getHashLatestBlock;\n    let latestPulse = -1;\n\n    this.appendBlock = function (block, announceFlag, callback) {\n        archive.writeFile(blocksPath + \"/\" + block.pulse, JSON.stringify(block, null, 1), (err) => {\n            if (err) {\n                return callback(err);\n            }\n\n            if (block.pulse > latestPulse) {\n                latestPulse = block.pulse;\n\n                archive.writeFile(blocksPath + \"/index\", latestPulse.toString(), (err) => {\n                    if (err) {\n                        return callback(err);\n                    }\n\n                    lht.update(block.pulse, block);\n                    callback();\n                });\n            } else {\n                callback();\n            }\n        });\n    };\n\n    this.getLatestBlockNumber = function (callback) {\n        let maxBlockNumber = 0;\n        archive.readFile(blocksPath + \"/index\", (err, res) => {\n            if (err) {\n                return callback(err);\n            }\n\n            maxBlockNumber = parseInt(res.toString());\n\n            callback(undefined, maxBlockNumber);\n        });\n    };\n\n    this.loadSpecificBlock = function (blockNumber, callback) {\n        archive.readFile(blocksPath + \"/\" + blockNumber.toString(), (err, res) => {\n            if (err) {\n                return callback(err);\n            }\n\n            try {\n                res = JSON.parse(res.toString());\n                lht.update(res.pulse, res);\n            } catch (e) {\n                callback(e);\n                return;\n            }\n\n            callback(null, res);\n        });\n    };\n\n    ////////////////////////\n    let observer;\n    //send to callback all blocks newer then fromVSD\n    this.observeNewBlocks = function (fromVSD, callback) {\n        observer = callback;\n    }\n}\n\nmodule.exports = BarHistoryStorage;","const LatestHashTracker = require(\"./LatestHashTracker\");\n\nfunction FsHistoryStorage(folder) {\n    const blocksPath = folder + \"/blocks\";\n    let lht = new LatestHashTracker();\n    this.getHashLatestBlock = lht.getHashLatestBlock;\n\n    let fs = require(\"fs\");\n    let latestPulse = -1;\n\n    this.appendBlock = function (block, announceFlag, callback) {\n        ensureBlocksPathExist((err) => {\n            if (err) {\n                return callback(err);\n            }\n\n            fs.writeFile(blocksPath + \"/\" + block.pulse, JSON.stringify(block, null, 1), (err) => {\n                if (err) {\n                    return callback(err);\n                }\n\n                if(block.pulse > latestPulse) {\n                    latestPulse = block.pulse;\n\n                    fs.writeFile(blocksPath + \"/index\", latestPulse.toString(), (err) => {\n                        if (err) {\n                            return callback(err);\n                        }\n\n                        lht.update(block.pulse, block);\n                        callback();\n\n                    });\n                } else {\n                    callback();\n                }\n            });\n        });\n    };\n\n    this.getLatestBlockNumber = function (callback) {\n        ensureBlocksPathExist((err) => {\n            if (err) {\n                return callback(err);\n            }\n\n            fs.readFile(blocksPath + \"/index\", function (err, res) {\n                let maxBlockNumber = 0;\n                if (err) {\n                    callback(err);\n                } else {\n                    maxBlockNumber = parseInt(res);\n                    callback(null, maxBlockNumber);\n                }\n            });\n        });\n    };\n\n    this.loadSpecificBlock = function (blockNumber, callback) {\n        ensureBlocksPathExist((err) => {\n            if (err) {\n                return callback(err);\n            }\n\n            fs.readFile(blocksPath + \"/\" + blockNumber, 'utf8', function (err, res) {\n                if (err) {\n                    callback(err, null);\n                } else {\n                    try {\n                        res = JSON.parse(res);\n                        lht.update(res.pulse, res);\n                    } catch (e) {\n                        console.log('could not parse', e, res);\n                        callback(e);\n                        return;\n                    }\n\n                    callback(null, res);\n                }\n            });\n        });\n    };\n\n    ////////////////////////\n    let observer;\n    //send to callback all blocks newer then fromVSD\n    this.observeNewBlocks = function (fromVSD, callback) {\n        observer = callback;\n    };\n\n    //------------------------------------------- internal methods ----------------------------------------------------\n    function ensureBlocksPathExist(callback) {\n        fs.access(blocksPath, (err) => {\n            if (err) {\n                fs.mkdir(blocksPath, {recursive: true}, callback);\n            }else{\n                callback();\n            }\n        });\n    }\n}\n\nmodule.exports = FsHistoryStorage;\n","function LatestHashTracker() {\n    let hlb = \"none\";\n    let maxBlockNumber = 0;\n\n    this.update = function (blockNumber, block) {\n        if (blockNumber > maxBlockNumber) {\n            hlb = block.blockDigest;\n        }\n    };\n\n    this.getHashLatestBlock = function () {\n        return hlb;\n    }\n}\n\nmodule.exports = LatestHashTracker;","const LatestHashTracker = require(\"./LatestHashTracker\");\n\nfunction MemoryHistoryStorage() {\n    let blocks = [];\n    let lht = new LatestHashTracker();\n    this.getHashLatestBlock = lht.getHashLatestBlock;\n\n    this.appendBlock = function (block, announceFlag, callback) {\n        blocks.push(block);\n        lht.update(blocks.length, block);\n        callback(null, block);\n\n    };\n\n    this.getLatestBlockNumber = function (callback) {\n        callback(null, blocks.length);\n    };\n\n    this.loadSpecificBlock = function (blockNumber, callback) {\n        let block = blocks[blockNumber];\n        lht.update(blockNumber, block);\n        callback(null, blocks[blockNumber]);\n    }\n}\n\nmodule.exports = MemoryHistoryStorage;","const FsHistoryStorage = require(\"./FsHistoryStorage\");\nconst MemoryHistoryStorage = require(\"./MemoryHistoryStorage\");\nconst BarHistoryStorage = require(\"./BarHistoryStorage\");\n\nmodule.exports = {\n    createStorage: function (storageType, ...args) {\n        switch (storageType) {\n            case \"fs\":\n                return new FsHistoryStorage(...args);\n            case \"bar\":\n                return new BarHistoryStorage(...args);\n            case \"memory\":\n                return new MemoryHistoryStorage(...args);\n            default:\n                $$.exception(\"Unknown blockchain storage \" + storageType);\n        }\n    }\n};","const mc = require(\"../../moduleConstants\");\nlet pulseUtil = require(\"../../OBFT/PulseUtil\");\n\n\nfunction IPCNetworkSimulator(){\n    this.broadcastPulse = function(pulse){\n        process.send(pulse);\n    }\n\n    this.newPulse = function(){\n        let p = pulseUtil.createPulse()\n        process.send(pulse);\n    }\n\n    this.listen = function(callback){\n        process.on('message', function(msg){\n            callback(null, msg);\n        })\n    }\n}\n\n/*\nvar com = {\n    broadcastPulse: function(from, pulse){\n        nodes.forEach( function(n){\n            if(n.nodeName != from) {\n                setTimeout(function(){\n                    n.recordPulse(from, pulse);\n                }, cutil.getRandomInt(cfg.NETWORK_DELAY));\n            } else {\n                if(pulse.currentPulse > 2 * maxPulse){\n                    afterFinish[from] = true;\n                }\n            }\n        });\n\n\n        if(Object.keys(afterFinish).length >= cfg.MAX_NODES){\n            console.log(Object.keys(afterFinish).length , cfg.MAX_NODES);\n            setTimeout(terminate, 1);\n        }\n    }\n} */\n\n\n\nfunction VirtualMQAdapter(){\n\n}\n\nmodule.exports = {\n    createNetworkAdapter: function (strategyType, ...args) {\n        switch (strategyType) {\n            case \"ipc\":\n                return new IPCNetworkSimulator(...args);\n            case \"virtualmq\":\n                return new VirtualMQAdapter(...args);\n            default:\n                $$.error(\"Unknown communication strategy  \" + strategyType);\n        }\n    }\n}","function PermissiveSignatureProvider(){\n    /*\n    return a signature of message ms for agent agentId\n     */\n    this.signAs = function(agentId, msg){\n        return \"Signature from agent \"+agentId + \" should be here!\";\n    }\n\n    this.verify = function(msg, signatures){\n        return true;\n    };\n}\n\n\nmodule.exports = {\n    createSignatureProvider: function (signProvType,...args) {\n        switch (signProvType) {\n            case \"permissive\":\n                return new PermissiveSignatureProvider(...args);\n            case \"blockchain\":\n            default:\n                $$.exception(\"Signature Provider\" + signProvType + \" not implemented\");\n        }\n    }\n}\n","\nfunction SimpleMajoritarianStrategy(shareHoldersCounter){\n    this.refreshShares = function(){\n\n    }\n    this.vote = function (previousValue, agent) {\n        if (!previousValue) {\n            previousValue = 0;\n        }\n        return previousValue + 1;\n    }\n\n    this.isMajoritarian = function (value) {\n        //console.log(value , Math.floor(shareHoldersCounter/2) + 1);\n        return value >= Math.floor(shareHoldersCounter / 2) + 1;\n    }\n}\n\n\nfunction BlockchainShareHoldersMajority(){\n    let shares = {}\n    this.refreshShares = function(){\n\n    }\n\n    this.vote = function (previousValue, agent) {\n        if (!previousValue) {\n            previousValue = 0;\n        }\n        return previousValue + shares[agent];\n    }\n\n    this.isMajoritarian = function (value) {\n        return value > 0.50;\n    }\n}\n\nmodule.exports = {\n    createVotingStrategy: function (strategyType, ...args) {\n        switch (strategyType) {\n            case \"democratic\":\n                return new SimpleMajoritarianStrategy(...args);\n            case \"shareholders\":\n                return new BlockchainShareHoldersMajority(...args);\n            default:\n                $$.error(\"Unknown voting strategy  \" + strategyType);\n        }\n    }\n}","const mc = require(\"../../moduleConstants\");\n\nfunction StorageContainer(){\n    this.pskdb = {};\n    this.keys = {};\n    this.pulse = 0;\n    let self = this;\n    let latestState = {\n\n    };\n\n    this.readKey = function(key){\n        return self.keys[key];\n    };\n\n    this.writeKey = function(key, value){\n        self.keys[key] = value;\n    };\n\n    function updateAlias(assetType, alias,swarmId){\n        let keyName = assetType + mc.ALIASES;\n        let value = self.readKey(keyName);\n        if(value === undefined){\n            value = {};\n            value[alias] = swarmId;\n        } else {\n            value = JSON.parse(value);\n            value[alias] = swarmId;\n        }\n        self.writeKey(keyName,JSON.stringify(value));\n    }\n\n    this.updateAliases = function(aliases){\n        for(let swarmId in aliases){\n            updateAlias(aliases[swarmId].assetType, aliases[swarmId].alias, swarmId);\n        }\n    }\n}\n\nfunction BarCache(archive) {\n    let storage = new StorageContainer();\n    this.readKey = storage.readKey;\n    this.writeKey = storage.writeKey;\n    this.updateAliases = storage.updateAliases;\n\n    //just in case the folder got to use as storage does not exist\n\n    const worldStateCachePath = \"/worldStateCache\";\n\n    this.getState = function (callback) {\n        archive.readFile(worldStateCachePath,  function (err, res) {\n            let objRes = {};\n            if (err) {\n                callback(err, objRes);\n                console.log(\"Initialisating empty blockchain state\");\n            } else {\n                objRes = JSON.parse(res);\n                storage.pskdb = objRes.pskdb;\n                storage.keys  = objRes.keys;\n                storage.pulse  = objRes.pulse;\n                callback(null, storage.pskdb);\n            }\n        });\n    };\n\n    this.updateState = function (internalValues, callback) {\n        storage.pskdb = internalValues;\n        archive.writeFile(worldStateCachePath, JSON.stringify(storage, null, 1), callback);\n    };\n\n    this.dump = function(){\n        console.log(\"EDFSCache:\", storage);\n    }\n\n}\n\nfunction MemoryCache() {\n    let storage = new StorageContainer();\n    this.readKey = storage.readKey;\n    this.writeKey = storage.writeKey;\n    this.updateAliases = storage.updateAliases;\n\n    this.getState = function (callback) { //err, valuesFromCache\n        callback(null, storage.pskdb);\n    };\n\n    this.updateState = function (internalValues, callback) {\n        //console.info(\"Commiting state in memory cache \"/*, internalValues*/)\n        storage.pskdb = internalValues;\n        storage.pulse = internalValues.pulse;\n        setImmediate(() => {\n            callback(null, storage.pskdb);\n        });\n    };\n\n    this.dump = function(){\n        console.log(\"MemoryCache:\", storage);\n    }\n}\n\nfunction LocalWSCache(folder) {\n    let storage = new StorageContainer();\n    this.readKey = storage.readKey;\n    this.writeKey = storage.writeKey;\n    this.updateAliases = storage.updateAliases;\n\n    //just in case the folder got to use as storage does not exist\n    require(\"fs\").mkdirSync(folder, {recursive: true});\n\n    const worldStateCachePath = folder + \"/worldStateCache\";\n    let fs = require(\"fs\");\n\n    this.getState = function (callback) {\n        fs.readFile(worldStateCachePath, 'utf8', function (err, res) {\n            let objRes = {};\n            if (err) {\n                callback(err, objRes);\n                console.log(\"Initialisating empty blockchain state\");\n            } else {\n                objRes = JSON.parse(res);\n                storage.pskdb = objRes.pskdb;\n                storage.keys  = objRes.keys;\n                storage.pulse  = objRes.pulse;\n                callback(null, storage.pskdb);\n            }\n        });\n    };\n\n    this.updateState = function (internalValues, callback) {\n        storage.pskdb = internalValues;\n        fs.writeFile(worldStateCachePath, JSON.stringify(storage, null, 1), callback);\n    };\n\n    this.dump = function(){\n        console.log(\"LocalWSCache:\", storage);\n    }\n\n}\n\n\nmodule.exports = {\n    createCache: function (cacheType, ...args) {\n        switch (cacheType) {\n            case \"fs\":\n                return new LocalWSCache(...args);\n            case \"bar\":\n                return new BarCache(...args);\n            case \"memory\":\n                return new MemoryCache(...args);\n            default:\n                $$.exception(\"Unknown blockchain cache \" + cacheType);\n        }\n    }\n};","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar has = Object.prototype.hasOwnProperty;\nvar hasNativeMap = typeof Map !== \"undefined\";\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nfunction ArraySet() {\n  this._array = [];\n  this._set = hasNativeMap ? new Map() : Object.create(null);\n}\n\n/**\n * Static method for creating ArraySet instances from an existing array.\n */\nArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n  var set = new ArraySet();\n  for (var i = 0, len = aArray.length; i < len; i++) {\n    set.add(aArray[i], aAllowDuplicates);\n  }\n  return set;\n};\n\n/**\n * Return how many unique items are in this ArraySet. If duplicates have been\n * added, than those do not count towards the size.\n *\n * @returns Number\n */\nArraySet.prototype.size = function ArraySet_size() {\n  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n};\n\n/**\n * Add the given string to this set.\n *\n * @param String aStr\n */\nArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n  var idx = this._array.length;\n  if (!isDuplicate || aAllowDuplicates) {\n    this._array.push(aStr);\n  }\n  if (!isDuplicate) {\n    if (hasNativeMap) {\n      this._set.set(aStr, idx);\n    } else {\n      this._set[sStr] = idx;\n    }\n  }\n};\n\n/**\n * Is the given string a member of this set?\n *\n * @param String aStr\n */\nArraySet.prototype.has = function ArraySet_has(aStr) {\n  if (hasNativeMap) {\n    return this._set.has(aStr);\n  } else {\n    var sStr = util.toSetString(aStr);\n    return has.call(this._set, sStr);\n  }\n};\n\n/**\n * What is the index of the given string in the array?\n *\n * @param String aStr\n */\nArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n  if (hasNativeMap) {\n    var idx = this._set.get(aStr);\n    if (idx >= 0) {\n        return idx;\n    }\n  } else {\n    var sStr = util.toSetString(aStr);\n    if (has.call(this._set, sStr)) {\n      return this._set[sStr];\n    }\n  }\n\n  throw new Error('\"' + aStr + '\" is not in the set.');\n};\n\n/**\n * What is the element at the given index?\n *\n * @param Number aIdx\n */\nArraySet.prototype.at = function ArraySet_at(aIdx) {\n  if (aIdx >= 0 && aIdx < this._array.length) {\n    return this._array[aIdx];\n  }\n  throw new Error('No element indexed by ' + aIdx);\n};\n\n/**\n * Returns the array representation of this set (which has the proper indices\n * indicated by indexOf). Note that this is a copy of the internal array used\n * for storing the members so that no one can mess with internal state.\n */\nArraySet.prototype.toArray = function ArraySet_toArray() {\n  return this._array.slice();\n};\n\nexports.ArraySet = ArraySet;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar base64 = require('./base64');\n\n// A single base 64 digit can contain 6 bits of data. For the base 64 variable\n// length quantities we use in the source map spec, the first bit is the sign,\n// the next four bits are the actual value, and the 6th bit is the\n// continuation bit. The continuation bit tells us whether there are more\n// digits in this value following this digit.\n//\n//   Continuation\n//   |    Sign\n//   |    |\n//   V    V\n//   101011\n\nvar VLQ_BASE_SHIFT = 5;\n\n// binary: 100000\nvar VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n// binary: 011111\nvar VLQ_BASE_MASK = VLQ_BASE - 1;\n\n// binary: 100000\nvar VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n/**\n * Converts from a two-complement value to a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n */\nfunction toVLQSigned(aValue) {\n  return aValue < 0\n    ? ((-aValue) << 1) + 1\n    : (aValue << 1) + 0;\n}\n\n/**\n * Converts to a two-complement value from a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n */\nfunction fromVLQSigned(aValue) {\n  var isNegative = (aValue & 1) === 1;\n  var shifted = aValue >> 1;\n  return isNegative\n    ? -shifted\n    : shifted;\n}\n\n/**\n * Returns the base 64 VLQ encoded value.\n */\nexports.encode = function base64VLQ_encode(aValue) {\n  var encoded = \"\";\n  var digit;\n\n  var vlq = toVLQSigned(aValue);\n\n  do {\n    digit = vlq & VLQ_BASE_MASK;\n    vlq >>>= VLQ_BASE_SHIFT;\n    if (vlq > 0) {\n      // There are still more digits in this value, so we must make sure the\n      // continuation bit is marked.\n      digit |= VLQ_CONTINUATION_BIT;\n    }\n    encoded += base64.encode(digit);\n  } while (vlq > 0);\n\n  return encoded;\n};\n\n/**\n * Decodes the next base 64 VLQ value from the given string and returns the\n * value and the rest of the string via the out parameter.\n */\nexports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n  var strLen = aStr.length;\n  var result = 0;\n  var shift = 0;\n  var continuation, digit;\n\n  do {\n    if (aIndex >= strLen) {\n      throw new Error(\"Expected more digits in base 64 VLQ value.\");\n    }\n\n    digit = base64.decode(aStr.charCodeAt(aIndex++));\n    if (digit === -1) {\n      throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n    }\n\n    continuation = !!(digit & VLQ_CONTINUATION_BIT);\n    digit &= VLQ_BASE_MASK;\n    result = result + (digit << shift);\n    shift += VLQ_BASE_SHIFT;\n  } while (continuation);\n\n  aOutParam.value = fromVLQSigned(result);\n  aOutParam.rest = aIndex;\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n/**\n * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n */\nexports.encode = function (number) {\n  if (0 <= number && number < intToCharMap.length) {\n    return intToCharMap[number];\n  }\n  throw new TypeError(\"Must be between 0 and 63: \" + number);\n};\n\n/**\n * Decode a single base 64 character code digit to an integer. Returns -1 on\n * failure.\n */\nexports.decode = function (charCode) {\n  var bigA = 65;     // 'A'\n  var bigZ = 90;     // 'Z'\n\n  var littleA = 97;  // 'a'\n  var littleZ = 122; // 'z'\n\n  var zero = 48;     // '0'\n  var nine = 57;     // '9'\n\n  var plus = 43;     // '+'\n  var slash = 47;    // '/'\n\n  var littleOffset = 26;\n  var numberOffset = 52;\n\n  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ\n  if (bigA <= charCode && charCode <= bigZ) {\n    return (charCode - bigA);\n  }\n\n  // 26 - 51: abcdefghijklmnopqrstuvwxyz\n  if (littleA <= charCode && charCode <= littleZ) {\n    return (charCode - littleA + littleOffset);\n  }\n\n  // 52 - 61: 0123456789\n  if (zero <= charCode && charCode <= nine) {\n    return (charCode - zero + numberOffset);\n  }\n\n  // 62: +\n  if (charCode == plus) {\n    return 62;\n  }\n\n  // 63: /\n  if (charCode == slash) {\n    return 63;\n  }\n\n  // Invalid base64 digit.\n  return -1;\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nexports.GREATEST_LOWER_BOUND = 1;\nexports.LEAST_UPPER_BOUND = 2;\n\n/**\n * Recursive implementation of binary search.\n *\n * @param aLow Indices here and lower do not contain the needle.\n * @param aHigh Indices here and higher do not contain the needle.\n * @param aNeedle The element being searched for.\n * @param aHaystack The non-empty array being searched.\n * @param aCompare Function which takes two elements and returns -1, 0, or 1.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n */\nfunction recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n  // This function terminates when one of the following is true:\n  //\n  //   1. We find the exact element we are looking for.\n  //\n  //   2. We did not find the exact element, but we can return the index of\n  //      the next-closest element.\n  //\n  //   3. We did not find the exact element, and there is no next-closest\n  //      element than the one we are searching for, so we return -1.\n  var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n  var cmp = aCompare(aNeedle, aHaystack[mid], true);\n  if (cmp === 0) {\n    // Found the element we are looking for.\n    return mid;\n  }\n  else if (cmp > 0) {\n    // Our needle is greater than aHaystack[mid].\n    if (aHigh - mid > 1) {\n      // The element is in the upper half.\n      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // The exact needle element was not found in this haystack. Determine if\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return aHigh < aHaystack.length ? aHigh : -1;\n    } else {\n      return mid;\n    }\n  }\n  else {\n    // Our needle is less than aHaystack[mid].\n    if (mid - aLow > 1) {\n      // The element is in the lower half.\n      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return mid;\n    } else {\n      return aLow < 0 ? -1 : aLow;\n    }\n  }\n}\n\n/**\n * This is an implementation of binary search which will always try and return\n * the index of the closest element if there is no exact hit. This is because\n * mappings between original and generated line/col pairs are single points,\n * and there is an implicit region between each of them, so a miss just means\n * that you aren't on the very start of a region.\n *\n * @param aNeedle The element you are looking for.\n * @param aHaystack The array that is being searched.\n * @param aCompare A function which takes the needle and an element in the\n *     array and returns -1, 0, or 1 depending on whether the needle is less\n *     than, equal to, or greater than the element, respectively.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.\n */\nexports.search = function search(aNeedle, aHaystack, aCompare, aBias) {\n  if (aHaystack.length === 0) {\n    return -1;\n  }\n\n  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,\n                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);\n  if (index < 0) {\n    return -1;\n  }\n\n  // We have found either the exact element, or the next-closest element than\n  // the one we are searching for. However, there may be more than one such\n  // element. Make sure we always return the smallest of these.\n  while (index - 1 >= 0) {\n    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n      break;\n    }\n    --index;\n  }\n\n  return index;\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2014 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\n\n/**\n * Determine whether mappingB is after mappingA with respect to generated\n * position.\n */\nfunction generatedPositionAfter(mappingA, mappingB) {\n  // Optimized for most common case\n  var lineA = mappingA.generatedLine;\n  var lineB = mappingB.generatedLine;\n  var columnA = mappingA.generatedColumn;\n  var columnB = mappingB.generatedColumn;\n  return lineB > lineA || lineB == lineA && columnB >= columnA ||\n         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n}\n\n/**\n * A data structure to provide a sorted view of accumulated mappings in a\n * performance conscious manner. It trades a neglibable overhead in general\n * case for a large speedup in case of mappings being added in order.\n */\nfunction MappingList() {\n  this._array = [];\n  this._sorted = true;\n  // Serves as infimum\n  this._last = {generatedLine: -1, generatedColumn: 0};\n}\n\n/**\n * Iterate through internal items. This method takes the same arguments that\n * `Array.prototype.forEach` takes.\n *\n * NOTE: The order of the mappings is NOT guaranteed.\n */\nMappingList.prototype.unsortedForEach =\n  function MappingList_forEach(aCallback, aThisArg) {\n    this._array.forEach(aCallback, aThisArg);\n  };\n\n/**\n * Add the given source mapping.\n *\n * @param Object aMapping\n */\nMappingList.prototype.add = function MappingList_add(aMapping) {\n  if (generatedPositionAfter(this._last, aMapping)) {\n    this._last = aMapping;\n    this._array.push(aMapping);\n  } else {\n    this._sorted = false;\n    this._array.push(aMapping);\n  }\n};\n\n/**\n * Returns the flat, sorted array of mappings. The mappings are sorted by\n * generated position.\n *\n * WARNING: This method returns internal data without copying, for\n * performance. The return value must NOT be mutated, and should be treated as\n * an immutable borrow. If you want to take ownership, you must make your own\n * copy.\n */\nMappingList.prototype.toArray = function MappingList_toArray() {\n  if (!this._sorted) {\n    this._array.sort(util.compareByGeneratedPositionsInflated);\n    this._sorted = true;\n  }\n  return this._array;\n};\n\nexports.MappingList = MappingList;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n// It turns out that some (most?) JavaScript engines don't self-host\n// `Array.prototype.sort`. This makes sense because C++ will likely remain\n// faster than JS when doing raw CPU-intensive sorting. However, when using a\n// custom comparator function, calling back and forth between the VM's C++ and\n// JIT'd JS is rather slow *and* loses JIT type information, resulting in\n// worse generated code for the comparator function than would be optimal. In\n// fact, when sorting with a comparator, these costs outweigh the benefits of\n// sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n// a ~3500ms mean speed-up in `bench/bench.html`.\n\n/**\n * Swap the elements indexed by `x` and `y` in the array `ary`.\n *\n * @param {Array} ary\n *        The array.\n * @param {Number} x\n *        The index of the first item.\n * @param {Number} y\n *        The index of the second item.\n */\nfunction swap(ary, x, y) {\n  var temp = ary[x];\n  ary[x] = ary[y];\n  ary[y] = temp;\n}\n\n/**\n * Returns a random integer within the range `low .. high` inclusive.\n *\n * @param {Number} low\n *        The lower bound on the range.\n * @param {Number} high\n *        The upper bound on the range.\n */\nfunction randomIntInRange(low, high) {\n  return Math.round(low + (Math.random() * (high - low)));\n}\n\n/**\n * The Quick Sort algorithm.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n * @param {Number} p\n *        Start index of the array\n * @param {Number} r\n *        End index of the array\n */\nfunction doQuickSort(ary, comparator, p, r) {\n  // If our lower bound is less than our upper bound, we (1) partition the\n  // array into two pieces and (2) recurse on each half. If it is not, this is\n  // the empty array and our base case.\n\n  if (p < r) {\n    // (1) Partitioning.\n    //\n    // The partitioning chooses a pivot between `p` and `r` and moves all\n    // elements that are less than or equal to the pivot to the before it, and\n    // all the elements that are greater than it after it. The effect is that\n    // once partition is done, the pivot is in the exact place it will be when\n    // the array is put in sorted order, and it will not need to be moved\n    // again. This runs in O(n) time.\n\n    // Always choose a random pivot so that an input array which is reverse\n    // sorted does not cause O(n^2) running time.\n    var pivotIndex = randomIntInRange(p, r);\n    var i = p - 1;\n\n    swap(ary, pivotIndex, r);\n    var pivot = ary[r];\n\n    // Immediately after `j` is incremented in this loop, the following hold\n    // true:\n    //\n    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n    //\n    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\n    for (var j = p; j < r; j++) {\n      if (comparator(ary[j], pivot) <= 0) {\n        i += 1;\n        swap(ary, i, j);\n      }\n    }\n\n    swap(ary, i + 1, j);\n    var q = i + 1;\n\n    // (2) Recurse on each half.\n\n    doQuickSort(ary, comparator, p, q - 1);\n    doQuickSort(ary, comparator, q + 1, r);\n  }\n}\n\n/**\n * Sort the given array in-place with the given comparator function.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n */\nexports.quickSort = function (ary, comparator) {\n  doQuickSort(ary, comparator, 0, ary.length - 1);\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar binarySearch = require('./binary-search');\nvar ArraySet = require('./array-set').ArraySet;\nvar base64VLQ = require('./base64-vlq');\nvar quickSort = require('./quick-sort').quickSort;\n\nfunction SourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  return sourceMap.sections != null\n    ? new IndexedSourceMapConsumer(sourceMap)\n    : new BasicSourceMapConsumer(sourceMap);\n}\n\nSourceMapConsumer.fromSourceMap = function(aSourceMap) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap);\n}\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\n\n// `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\n\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n  get: function () {\n    if (!this.__generatedMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappings;\n  }\n});\n\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n  get: function () {\n    if (!this.__originalMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappings;\n  }\n});\n\nSourceMapConsumer.prototype._charIsMappingSeparator =\n  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n    var c = aStr.charAt(index);\n    return c === \";\" || c === \",\";\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  };\n\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\n\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n/**\n * Iterate over each mapping between an original source/line/column and a\n * generated line/column in this source map.\n *\n * @param Function aCallback\n *        The function that is called with each mapping.\n * @param Object aContext\n *        Optional. If specified, this object will be the value of `this` every\n *        time that `aCallback` is called.\n * @param aOrder\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n *        iterate over the mappings sorted by the generated file's line/column\n *        order or the original's source/line/column order, respectively. Defaults to\n *        `SourceMapConsumer.GENERATED_ORDER`.\n */\nSourceMapConsumer.prototype.eachMapping =\n  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n    var context = aContext || null;\n    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n    var mappings;\n    switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n    }\n\n    var sourceRoot = this.sourceRoot;\n    mappings.map(function (mapping) {\n      var source = mapping.source === null ? null : this._sources.at(mapping.source);\n      if (source != null && sourceRoot != null) {\n        source = util.join(sourceRoot, source);\n      }\n      return {\n        source: source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : this._names.at(mapping.name)\n      };\n    }, this).forEach(aCallback, context);\n  };\n\n/**\n * Returns all generated line and column information for the original source,\n * line, and column provided. If no column is provided, returns all mappings\n * corresponding to a either the line we are searching for or the next\n * closest line that has any mappings. Otherwise, returns all mappings\n * corresponding to the given line and either the column we are searching for\n * or the next closest column that has any offsets.\n *\n * The only argument is an object with the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: Optional. the column number in the original source.\n *\n * and an array of objects is returned, each with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nSourceMapConsumer.prototype.allGeneratedPositionsFor =\n  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n    var line = util.getArg(aArgs, 'line');\n\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    var needle = {\n      source: util.getArg(aArgs, 'source'),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, 'column', 0)\n    };\n\n    if (this.sourceRoot != null) {\n      needle.source = util.relative(this.sourceRoot, needle.source);\n    }\n    if (!this._sources.has(needle.source)) {\n      return [];\n    }\n    needle.source = this._sources.indexOf(needle.source);\n\n    var mappings = [];\n\n    var index = this._findMapping(needle,\n                                  this._originalMappings,\n                                  \"originalLine\",\n                                  \"originalColumn\",\n                                  util.compareByOriginalPositions,\n                                  binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (aArgs.column === undefined) {\n        var originalLine = mapping.originalLine;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n        while (mapping && mapping.originalLine === originalLine) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        var originalColumn = mapping.originalColumn;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n        while (mapping &&\n               mapping.originalLine === line &&\n               mapping.originalColumn == originalColumn) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n\n    return mappings;\n  };\n\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The only parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referrenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nfunction BasicSourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sources = util.getArg(sourceMap, 'sources');\n  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n  // requires the array) to play nice here.\n  var names = util.getArg(sourceMap, 'names', []);\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n  var mappings = util.getArg(sourceMap, 'mappings');\n  var file = util.getArg(sourceMap, 'file', null);\n\n  // Once again, Sass deviates from the spec and supplies the version as a\n  // string rather than a number, so we use loose equality checking here.\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  sources = sources\n    .map(String)\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    .map(util.normalize)\n    // Always ensure that absolute sources are internally stored relative to\n    // the source root, if the source root is absolute. Not doing this would\n    // be particularly problematic when the source root is a prefix of the\n    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n    .map(function (source) {\n      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\n        ? util.relative(sourceRoot, source)\n        : source;\n    });\n\n  // Pass `true` below to allow duplicate names and sources. While source maps\n  // are intended to be compressed and deduplicated, the TypeScript compiler\n  // sometimes generates source maps with duplicates in them. See Github issue\n  // #72 and bugzil.la/889492.\n  this._names = ArraySet.fromArray(names.map(String), true);\n  this._sources = ArraySet.fromArray(sources, true);\n\n  this.sourceRoot = sourceRoot;\n  this.sourcesContent = sourcesContent;\n  this._mappings = mappings;\n  this.file = file;\n}\n\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n/**\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n *\n * @param SourceMapGenerator aSourceMap\n *        The source map that will be consumed.\n * @returns BasicSourceMapConsumer\n */\nBasicSourceMapConsumer.fromSourceMap =\n  function SourceMapConsumer_fromSourceMap(aSourceMap) {\n    var smc = Object.create(BasicSourceMapConsumer.prototype);\n\n    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n    smc.sourceRoot = aSourceMap._sourceRoot;\n    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n                                                            smc.sourceRoot);\n    smc.file = aSourceMap._file;\n\n    // Because we are modifying the entries (by converting string sources and\n    // names to indices into the sources and names ArraySets), we have to make\n    // a copy of the entry or else bad things happen. Shared mutable state\n    // strikes again! See github issue #191.\n\n    var generatedMappings = aSourceMap._mappings.toArray().slice();\n    var destGeneratedMappings = smc.__generatedMappings = [];\n    var destOriginalMappings = smc.__originalMappings = [];\n\n    for (var i = 0, length = generatedMappings.length; i < length; i++) {\n      var srcMapping = generatedMappings[i];\n      var destMapping = new Mapping;\n      destMapping.generatedLine = srcMapping.generatedLine;\n      destMapping.generatedColumn = srcMapping.generatedColumn;\n\n      if (srcMapping.source) {\n        destMapping.source = sources.indexOf(srcMapping.source);\n        destMapping.originalLine = srcMapping.originalLine;\n        destMapping.originalColumn = srcMapping.originalColumn;\n\n        if (srcMapping.name) {\n          destMapping.name = names.indexOf(srcMapping.name);\n        }\n\n        destOriginalMappings.push(destMapping);\n      }\n\n      destGeneratedMappings.push(destMapping);\n    }\n\n    quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n\n    return smc;\n  };\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nBasicSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    return this._sources.toArray().map(function (s) {\n      return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;\n    }, this);\n  }\n});\n\n/**\n * Provide the JIT with a nice shape / hidden class.\n */\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nBasicSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    var generatedLine = 1;\n    var previousGeneratedColumn = 0;\n    var previousOriginalLine = 0;\n    var previousOriginalColumn = 0;\n    var previousSource = 0;\n    var previousName = 0;\n    var length = aStr.length;\n    var index = 0;\n    var cachedSegments = {};\n    var temp = {};\n    var originalMappings = [];\n    var generatedMappings = [];\n    var mapping, str, segment, end, value;\n\n    while (index < length) {\n      if (aStr.charAt(index) === ';') {\n        generatedLine++;\n        index++;\n        previousGeneratedColumn = 0;\n      }\n      else if (aStr.charAt(index) === ',') {\n        index++;\n      }\n      else {\n        mapping = new Mapping();\n        mapping.generatedLine = generatedLine;\n\n        // Because each offset is encoded relative to the previous one,\n        // many segments often have the same encoding. We can exploit this\n        // fact by caching the parsed variable length fields of each segment,\n        // allowing us to avoid a second parse if we encounter the same\n        // segment again.\n        for (end = index; end < length; end++) {\n          if (this._charIsMappingSeparator(aStr, end)) {\n            break;\n          }\n        }\n        str = aStr.slice(index, end);\n\n        segment = cachedSegments[str];\n        if (segment) {\n          index += str.length;\n        } else {\n          segment = [];\n          while (index < end) {\n            base64VLQ.decode(aStr, index, temp);\n            value = temp.value;\n            index = temp.rest;\n            segment.push(value);\n          }\n\n          if (segment.length === 2) {\n            throw new Error('Found a source, but no line and column');\n          }\n\n          if (segment.length === 3) {\n            throw new Error('Found a source and line, but no column');\n          }\n\n          cachedSegments[str] = segment;\n        }\n\n        // Generated column.\n        mapping.generatedColumn = previousGeneratedColumn + segment[0];\n        previousGeneratedColumn = mapping.generatedColumn;\n\n        if (segment.length > 1) {\n          // Original source.\n          mapping.source = previousSource + segment[1];\n          previousSource += segment[1];\n\n          // Original line.\n          mapping.originalLine = previousOriginalLine + segment[2];\n          previousOriginalLine = mapping.originalLine;\n          // Lines are stored 0-based\n          mapping.originalLine += 1;\n\n          // Original column.\n          mapping.originalColumn = previousOriginalColumn + segment[3];\n          previousOriginalColumn = mapping.originalColumn;\n\n          if (segment.length > 4) {\n            // Original name.\n            mapping.name = previousName + segment[4];\n            previousName += segment[4];\n          }\n        }\n\n        generatedMappings.push(mapping);\n        if (typeof mapping.originalLine === 'number') {\n          originalMappings.push(mapping);\n        }\n      }\n    }\n\n    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n    this.__generatedMappings = generatedMappings;\n\n    quickSort(originalMappings, util.compareByOriginalPositions);\n    this.__originalMappings = originalMappings;\n  };\n\n/**\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\n * we are searching for in the given \"haystack\" of mappings.\n */\nBasicSourceMapConsumer.prototype._findMapping =\n  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n                                         aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError('Line must be greater than or equal to 1, got '\n                          + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError('Column must be greater than or equal to 0, got '\n                          + aNeedle[aColumnName]);\n    }\n\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  };\n\n/**\n * Compute the last column for each generated mapping. The last column is\n * inclusive.\n */\nBasicSourceMapConsumer.prototype.computeColumnSpans =\n  function SourceMapConsumer_computeColumnSpans() {\n    for (var index = 0; index < this._generatedMappings.length; ++index) {\n      var mapping = this._generatedMappings[index];\n\n      // Mappings do not contain a field for the last generated columnt. We\n      // can come up with an optimistic estimate, however, by assuming that\n      // mappings are contiguous (i.e. given two consecutive mappings, the\n      // first mapping ends where the second one starts).\n      if (index + 1 < this._generatedMappings.length) {\n        var nextMapping = this._generatedMappings[index + 1];\n\n        if (mapping.generatedLine === nextMapping.generatedLine) {\n          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n          continue;\n        }\n      }\n\n      // The last mapping for each line spans the entire line.\n      mapping.lastGeneratedColumn = Infinity;\n    }\n  };\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.\n *   - column: The column number in the generated source.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.\n *   - column: The column number in the original source, or null.\n *   - name: The original identifier, or null.\n */\nBasicSourceMapConsumer.prototype.originalPositionFor =\n  function SourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._generatedMappings,\n      \"generatedLine\",\n      \"generatedColumn\",\n      util.compareByGeneratedPositionsDeflated,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._generatedMappings[index];\n\n      if (mapping.generatedLine === needle.generatedLine) {\n        var source = util.getArg(mapping, 'source', null);\n        if (source !== null) {\n          source = this._sources.at(source);\n          if (this.sourceRoot != null) {\n            source = util.join(this.sourceRoot, source);\n          }\n        }\n        var name = util.getArg(mapping, 'name', null);\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n        return {\n          source: source,\n          line: util.getArg(mapping, 'originalLine', null),\n          column: util.getArg(mapping, 'originalColumn', null),\n          name: name\n        };\n      }\n    }\n\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function BasicSourceMapConsumer_hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() &&\n      !this.sourcesContent.some(function (sc) { return sc == null; });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nBasicSourceMapConsumer.prototype.sourceContentFor =\n  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n\n    if (this.sourceRoot != null) {\n      aSource = util.relative(this.sourceRoot, aSource);\n    }\n\n    if (this._sources.has(aSource)) {\n      return this.sourcesContent[this._sources.indexOf(aSource)];\n    }\n\n    var url;\n    if (this.sourceRoot != null\n        && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      var fileUriAbsPath = aSource.replace(/^file:\\/\\//, \"\");\n      if (url.scheme == \"file\"\n          && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n      }\n\n      if ((!url.path || url.path == \"/\")\n          && this._sources.has(\"/\" + aSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + aSource)];\n      }\n    }\n\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: The column number in the original source.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nBasicSourceMapConsumer.prototype.generatedPositionFor =\n  function SourceMapConsumer_generatedPositionFor(aArgs) {\n    var source = util.getArg(aArgs, 'source');\n    if (this.sourceRoot != null) {\n      source = util.relative(this.sourceRoot, source);\n    }\n    if (!this._sources.has(source)) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n    source = this._sources.indexOf(source);\n\n    var needle = {\n      source: source,\n      originalLine: util.getArg(aArgs, 'line'),\n      originalColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._originalMappings,\n      \"originalLine\",\n      \"originalColumn\",\n      util.compareByOriginalPositions,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (mapping.source === needle.source) {\n        return {\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        };\n      }\n    }\n\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  };\n\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The only parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nfunction IndexedSourceMapConsumer(aSourceMap) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = JSON.parse(aSourceMap.replace(/^\\)\\]\\}'/, ''));\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sections = util.getArg(sourceMap, 'sections');\n\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n\n  var lastOffset = {\n    line: -1,\n    column: 0\n  };\n  this._sections = sections.map(function (s) {\n    if (s.url) {\n      // The url field will require support for asynchronicity.\n      // See https://github.com/mozilla/source-map/issues/16\n      throw new Error('Support for url field in sections not implemented.');\n    }\n    var offset = util.getArg(s, 'offset');\n    var offsetLine = util.getArg(offset, 'line');\n    var offsetColumn = util.getArg(offset, 'column');\n\n    if (offsetLine < lastOffset.line ||\n        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n      throw new Error('Section offsets must be ordered and non-overlapping.');\n    }\n    lastOffset = offset;\n\n    return {\n      generatedOffset: {\n        // The offset fields are 0-based, but we use 1-based indices when\n        // encoding/decoding from VLQ.\n        generatedLine: offsetLine + 1,\n        generatedColumn: offsetColumn + 1\n      },\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'))\n    }\n  });\n}\n\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nIndexedSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    var sources = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n});\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.\n *   - column: The column number in the generated source.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.\n *   - column: The column number in the original source, or null.\n *   - name: The original identifier, or null.\n */\nIndexedSourceMapConsumer.prototype.originalPositionFor =\n  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    var sectionIndex = binarySearch.search(needle, this._sections,\n      function(needle, section) {\n        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n        if (cmp) {\n          return cmp;\n        }\n\n        return (needle.generatedColumn -\n                section.generatedOffset.generatedColumn);\n      });\n    var section = this._sections[sectionIndex];\n\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine -\n        (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn -\n        (section.generatedOffset.generatedLine === needle.generatedLine\n         ? section.generatedOffset.generatedColumn - 1\n         : 0),\n      bias: aArgs.bias\n    });\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n    return this._sections.every(function (s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nIndexedSourceMapConsumer.prototype.sourceContentFor =\n  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      var content = section.consumer.sourceContentFor(aSource, true);\n      if (content) {\n        return content;\n      }\n    }\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.\n *   - column: The column number in the original source.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.\n *   - column: The column number in the generated source, or null.\n */\nIndexedSourceMapConsumer.prototype.generatedPositionFor =\n  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n      if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {\n        continue;\n      }\n      var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n      if (generatedPosition) {\n        var ret = {\n          line: generatedPosition.line +\n            (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column +\n            (section.generatedOffset.generatedLine === generatedPosition.line\n             ? section.generatedOffset.generatedColumn - 1\n             : 0)\n        };\n        return ret;\n      }\n    }\n\n    return {\n      line: null,\n      column: null\n    };\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nIndexedSourceMapConsumer.prototype._parseMappings =\n  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    this.__generatedMappings = [];\n    this.__originalMappings = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n      var sectionMappings = section.consumer._generatedMappings;\n      for (var j = 0; j < sectionMappings.length; j++) {\n        var mapping = sectionMappings[j];\n\n        var source = section.consumer._sources.at(mapping.source);\n        if (section.consumer.sourceRoot !== null) {\n          source = util.join(section.consumer.sourceRoot, source);\n        }\n        this._sources.add(source);\n        source = this._sources.indexOf(source);\n\n        var name = section.consumer._names.at(mapping.name);\n        this._names.add(name);\n        name = this._names.indexOf(name);\n\n        // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n        var adjustedMapping = {\n          source: source,\n          generatedLine: mapping.generatedLine +\n            (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.generatedColumn +\n            (section.generatedOffset.generatedLine === mapping.generatedLine\n            ? section.generatedOffset.generatedColumn - 1\n            : 0),\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: name\n        };\n\n        this.__generatedMappings.push(adjustedMapping);\n        if (typeof adjustedMapping.originalLine === 'number') {\n          this.__originalMappings.push(adjustedMapping);\n        }\n      }\n    }\n\n    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n    quickSort(this.__originalMappings, util.compareByOriginalPositions);\n  };\n\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar base64VLQ = require('./base64-vlq');\nvar util = require('./util');\nvar ArraySet = require('./array-set').ArraySet;\nvar MappingList = require('./mapping-list').MappingList;\n\n/**\n * An instance of the SourceMapGenerator represents a source map which is\n * being built incrementally. You may pass an object with the following\n * properties:\n *\n *   - file: The filename of the generated source.\n *   - sourceRoot: A root for all relative URLs in this source map.\n */\nfunction SourceMapGenerator(aArgs) {\n  if (!aArgs) {\n    aArgs = {};\n  }\n  this._file = util.getArg(aArgs, 'file', null);\n  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);\n  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n  this._mappings = new MappingList();\n  this._sourcesContents = null;\n}\n\nSourceMapGenerator.prototype._version = 3;\n\n/**\n * Creates a new SourceMapGenerator based on a SourceMapConsumer\n *\n * @param aSourceMapConsumer The SourceMap.\n */\nSourceMapGenerator.fromSourceMap =\n  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n    var sourceRoot = aSourceMapConsumer.sourceRoot;\n    var generator = new SourceMapGenerator({\n      file: aSourceMapConsumer.file,\n      sourceRoot: sourceRoot\n    });\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      var newMapping = {\n        generated: {\n          line: mapping.generatedLine,\n          column: mapping.generatedColumn\n        }\n      };\n\n      if (mapping.source != null) {\n        newMapping.source = mapping.source;\n        if (sourceRoot != null) {\n          newMapping.source = util.relative(sourceRoot, newMapping.source);\n        }\n\n        newMapping.original = {\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        };\n\n        if (mapping.name != null) {\n          newMapping.name = mapping.name;\n        }\n      }\n\n      generator.addMapping(newMapping);\n    });\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        generator.setSourceContent(sourceFile, content);\n      }\n    });\n    return generator;\n  };\n\n/**\n * Add a single mapping from original source line and column to the generated\n * source's line and column for this source map being created. The mapping\n * object should have the following properties:\n *\n *   - generated: An object with the generated line and column positions.\n *   - original: An object with the original line and column positions.\n *   - source: The original source file (relative to the sourceRoot).\n *   - name: An optional original token name for this mapping.\n */\nSourceMapGenerator.prototype.addMapping =\n  function SourceMapGenerator_addMapping(aArgs) {\n    var generated = util.getArg(aArgs, 'generated');\n    var original = util.getArg(aArgs, 'original', null);\n    var source = util.getArg(aArgs, 'source', null);\n    var name = util.getArg(aArgs, 'name', null);\n\n    if (!this._skipValidation) {\n      this._validateMapping(generated, original, source, name);\n    }\n\n    if (source != null) {\n      source = String(source);\n      if (!this._sources.has(source)) {\n        this._sources.add(source);\n      }\n    }\n\n    if (name != null) {\n      name = String(name);\n      if (!this._names.has(name)) {\n        this._names.add(name);\n      }\n    }\n\n    this._mappings.add({\n      generatedLine: generated.line,\n      generatedColumn: generated.column,\n      originalLine: original != null && original.line,\n      originalColumn: original != null && original.column,\n      source: source,\n      name: name\n    });\n  };\n\n/**\n * Set the source content for a source file.\n */\nSourceMapGenerator.prototype.setSourceContent =\n  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n    var source = aSourceFile;\n    if (this._sourceRoot != null) {\n      source = util.relative(this._sourceRoot, source);\n    }\n\n    if (aSourceContent != null) {\n      // Add the source content to the _sourcesContents map.\n      // Create a new _sourcesContents map if the property is null.\n      if (!this._sourcesContents) {\n        this._sourcesContents = Object.create(null);\n      }\n      this._sourcesContents[util.toSetString(source)] = aSourceContent;\n    } else if (this._sourcesContents) {\n      // Remove the source file from the _sourcesContents map.\n      // If the _sourcesContents map is empty, set the property to null.\n      delete this._sourcesContents[util.toSetString(source)];\n      if (Object.keys(this._sourcesContents).length === 0) {\n        this._sourcesContents = null;\n      }\n    }\n  };\n\n/**\n * Applies the mappings of a sub-source-map for a specific source file to the\n * source map being generated. Each mapping to the supplied source file is\n * rewritten using the supplied source map. Note: The resolution for the\n * resulting mappings is the minimium of this map and the supplied map.\n *\n * @param aSourceMapConsumer The source map to be applied.\n * @param aSourceFile Optional. The filename of the source file.\n *        If omitted, SourceMapConsumer's file property will be used.\n * @param aSourceMapPath Optional. The dirname of the path to the source map\n *        to be applied. If relative, it is relative to the SourceMapConsumer.\n *        This parameter is needed when the two source maps aren't in the same\n *        directory, and the source map to be applied contains relative source\n *        paths. If so, those relative source paths need to be rewritten\n *        relative to the SourceMapGenerator.\n */\nSourceMapGenerator.prototype.applySourceMap =\n  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n    var sourceFile = aSourceFile;\n    // If aSourceFile is omitted, we will use the file property of the SourceMap\n    if (aSourceFile == null) {\n      if (aSourceMapConsumer.file == null) {\n        throw new Error(\n          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +\n          'or the source map\\'s \"file\" property. Both were omitted.'\n        );\n      }\n      sourceFile = aSourceMapConsumer.file;\n    }\n    var sourceRoot = this._sourceRoot;\n    // Make \"sourceFile\" relative if an absolute Url is passed.\n    if (sourceRoot != null) {\n      sourceFile = util.relative(sourceRoot, sourceFile);\n    }\n    // Applying the SourceMap can add and remove items from the sources and\n    // the names array.\n    var newSources = new ArraySet();\n    var newNames = new ArraySet();\n\n    // Find mappings for the \"sourceFile\"\n    this._mappings.unsortedForEach(function (mapping) {\n      if (mapping.source === sourceFile && mapping.originalLine != null) {\n        // Check if it can be mapped by the source map, then update the mapping.\n        var original = aSourceMapConsumer.originalPositionFor({\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        });\n        if (original.source != null) {\n          // Copy mapping\n          mapping.source = original.source;\n          if (aSourceMapPath != null) {\n            mapping.source = util.join(aSourceMapPath, mapping.source)\n          }\n          if (sourceRoot != null) {\n            mapping.source = util.relative(sourceRoot, mapping.source);\n          }\n          mapping.originalLine = original.line;\n          mapping.originalColumn = original.column;\n          if (original.name != null) {\n            mapping.name = original.name;\n          }\n        }\n      }\n\n      var source = mapping.source;\n      if (source != null && !newSources.has(source)) {\n        newSources.add(source);\n      }\n\n      var name = mapping.name;\n      if (name != null && !newNames.has(name)) {\n        newNames.add(name);\n      }\n\n    }, this);\n    this._sources = newSources;\n    this._names = newNames;\n\n    // Copy sourcesContents of applied map.\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aSourceMapPath != null) {\n          sourceFile = util.join(aSourceMapPath, sourceFile);\n        }\n        if (sourceRoot != null) {\n          sourceFile = util.relative(sourceRoot, sourceFile);\n        }\n        this.setSourceContent(sourceFile, content);\n      }\n    }, this);\n  };\n\n/**\n * A mapping can have one of the three levels of data:\n *\n *   1. Just the generated position.\n *   2. The Generated position, original position, and original source.\n *   3. Generated and original position, original source, as well as a name\n *      token.\n *\n * To maintain consistency, we validate that any new mapping being added falls\n * in to one of these categories.\n */\nSourceMapGenerator.prototype._validateMapping =\n  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,\n                                              aName) {\n    // When aOriginal is truthy but has empty values for .line and .column,\n    // it is most likely a programmer error. In this case we throw a very\n    // specific error message to try to guide them the right way.\n    // For example: https://github.com/Polymer/polymer-bundler/pull/519\n    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {\n        throw new Error(\n            'original.line and original.column are not numbers -- you probably meant to omit ' +\n            'the original mapping entirely and only map the generated position. If so, pass ' +\n            'null for the original mapping instead of an object with empty or null values.'\n        );\n    }\n\n    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n        && aGenerated.line > 0 && aGenerated.column >= 0\n        && !aOriginal && !aSource && !aName) {\n      // Case 1.\n      return;\n    }\n    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n             && aOriginal && 'line' in aOriginal && 'column' in aOriginal\n             && aGenerated.line > 0 && aGenerated.column >= 0\n             && aOriginal.line > 0 && aOriginal.column >= 0\n             && aSource) {\n      // Cases 2 and 3.\n      return;\n    }\n    else {\n      throw new Error('Invalid mapping: ' + JSON.stringify({\n        generated: aGenerated,\n        source: aSource,\n        original: aOriginal,\n        name: aName\n      }));\n    }\n  };\n\n/**\n * Serialize the accumulated mappings in to the stream of base 64 VLQs\n * specified by the source map format.\n */\nSourceMapGenerator.prototype._serializeMappings =\n  function SourceMapGenerator_serializeMappings() {\n    var previousGeneratedColumn = 0;\n    var previousGeneratedLine = 1;\n    var previousOriginalColumn = 0;\n    var previousOriginalLine = 0;\n    var previousName = 0;\n    var previousSource = 0;\n    var result = '';\n    var next;\n    var mapping;\n    var nameIdx;\n    var sourceIdx;\n\n    var mappings = this._mappings.toArray();\n    for (var i = 0, len = mappings.length; i < len; i++) {\n      mapping = mappings[i];\n      next = ''\n\n      if (mapping.generatedLine !== previousGeneratedLine) {\n        previousGeneratedColumn = 0;\n        while (mapping.generatedLine !== previousGeneratedLine) {\n          next += ';';\n          previousGeneratedLine++;\n        }\n      }\n      else {\n        if (i > 0) {\n          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n            continue;\n          }\n          next += ',';\n        }\n      }\n\n      next += base64VLQ.encode(mapping.generatedColumn\n                                 - previousGeneratedColumn);\n      previousGeneratedColumn = mapping.generatedColumn;\n\n      if (mapping.source != null) {\n        sourceIdx = this._sources.indexOf(mapping.source);\n        next += base64VLQ.encode(sourceIdx - previousSource);\n        previousSource = sourceIdx;\n\n        // lines are stored 0-based in SourceMap spec version 3\n        next += base64VLQ.encode(mapping.originalLine - 1\n                                   - previousOriginalLine);\n        previousOriginalLine = mapping.originalLine - 1;\n\n        next += base64VLQ.encode(mapping.originalColumn\n                                   - previousOriginalColumn);\n        previousOriginalColumn = mapping.originalColumn;\n\n        if (mapping.name != null) {\n          nameIdx = this._names.indexOf(mapping.name);\n          next += base64VLQ.encode(nameIdx - previousName);\n          previousName = nameIdx;\n        }\n      }\n\n      result += next;\n    }\n\n    return result;\n  };\n\nSourceMapGenerator.prototype._generateSourcesContent =\n  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n    return aSources.map(function (source) {\n      if (!this._sourcesContents) {\n        return null;\n      }\n      if (aSourceRoot != null) {\n        source = util.relative(aSourceRoot, source);\n      }\n      var key = util.toSetString(source);\n      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)\n        ? this._sourcesContents[key]\n        : null;\n    }, this);\n  };\n\n/**\n * Externalize the source map.\n */\nSourceMapGenerator.prototype.toJSON =\n  function SourceMapGenerator_toJSON() {\n    var map = {\n      version: this._version,\n      sources: this._sources.toArray(),\n      names: this._names.toArray(),\n      mappings: this._serializeMappings()\n    };\n    if (this._file != null) {\n      map.file = this._file;\n    }\n    if (this._sourceRoot != null) {\n      map.sourceRoot = this._sourceRoot;\n    }\n    if (this._sourcesContents) {\n      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n    }\n\n    return map;\n  };\n\n/**\n * Render the source map being generated to a string.\n */\nSourceMapGenerator.prototype.toString =\n  function SourceMapGenerator_toString() {\n    return JSON.stringify(this.toJSON());\n  };\n\nexports.SourceMapGenerator = SourceMapGenerator;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;\nvar util = require('./util');\n\n// Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n// operating systems these days (capturing the result).\nvar REGEX_NEWLINE = /(\\r?\\n)/;\n\n// Newline character code for charCodeAt() comparisons\nvar NEWLINE_CODE = 10;\n\n// Private symbol for identifying `SourceNode`s when multiple versions of\n// the source-map library are loaded. This MUST NOT CHANGE across\n// versions!\nvar isSourceNode = \"$$$isSourceNode$$$\";\n\n/**\n * SourceNodes provide a way to abstract over interpolating/concatenating\n * snippets of generated JavaScript source code while maintaining the line and\n * column information associated with the original source code.\n *\n * @param aLine The original line number.\n * @param aColumn The original column number.\n * @param aSource The original source's filename.\n * @param aChunks Optional. An array of strings which are snippets of\n *        generated JS, or other SourceNodes.\n * @param aName The original identifier.\n */\nfunction SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n  this.children = [];\n  this.sourceContents = {};\n  this.line = aLine == null ? null : aLine;\n  this.column = aColumn == null ? null : aColumn;\n  this.source = aSource == null ? null : aSource;\n  this.name = aName == null ? null : aName;\n  this[isSourceNode] = true;\n  if (aChunks != null) this.add(aChunks);\n}\n\n/**\n * Creates a SourceNode from generated code and a SourceMapConsumer.\n *\n * @param aGeneratedCode The generated code\n * @param aSourceMapConsumer The SourceMap for the generated code\n * @param aRelativePath Optional. The path that relative sources in the\n *        SourceMapConsumer should be relative to.\n */\nSourceNode.fromStringWithSourceMap =\n  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n    // The SourceNode we want to fill with the generated code\n    // and the SourceMap\n    var node = new SourceNode();\n\n    // All even indices of this array are one line of the generated code,\n    // while all odd indices are the newlines between two adjacent lines\n    // (since `REGEX_NEWLINE` captures its match).\n    // Processed fragments are accessed by calling `shiftNextLine`.\n    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n    var remainingLinesIndex = 0;\n    var shiftNextLine = function() {\n      var lineContents = getNextLine();\n      // The last line of a file might not have a newline.\n      var newLine = getNextLine() || \"\";\n      return lineContents + newLine;\n\n      function getNextLine() {\n        return remainingLinesIndex < remainingLines.length ?\n            remainingLines[remainingLinesIndex++] : undefined;\n      }\n    };\n\n    // We need to remember the position of \"remainingLines\"\n    var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n\n    // The generate SourceNodes we need a code range.\n    // To extract it current and last mapping is used.\n    // Here we store the last mapping.\n    var lastMapping = null;\n\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      if (lastMapping !== null) {\n        // We add the code from \"lastMapping\" to \"mapping\":\n        // First check if there is a new line in between.\n        if (lastGeneratedLine < mapping.generatedLine) {\n          // Associate first line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n          lastGeneratedLine++;\n          lastGeneratedColumn = 0;\n          // The remaining code is added without mapping\n        } else {\n          // There is no new line in between.\n          // Associate the code between \"lastGeneratedColumn\" and\n          // \"mapping.generatedColumn\" with \"lastMapping\"\n          var nextLine = remainingLines[remainingLinesIndex];\n          var code = nextLine.substr(0, mapping.generatedColumn -\n                                        lastGeneratedColumn);\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -\n                                              lastGeneratedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n          addMappingWithCode(lastMapping, code);\n          // No more remaining code, continue\n          lastMapping = mapping;\n          return;\n        }\n      }\n      // We add the generated code until the first mapping\n      // to the SourceNode without any mapping.\n      // Each line is added as separate string.\n      while (lastGeneratedLine < mapping.generatedLine) {\n        node.add(shiftNextLine());\n        lastGeneratedLine++;\n      }\n      if (lastGeneratedColumn < mapping.generatedColumn) {\n        var nextLine = remainingLines[remainingLinesIndex];\n        node.add(nextLine.substr(0, mapping.generatedColumn));\n        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n        lastGeneratedColumn = mapping.generatedColumn;\n      }\n      lastMapping = mapping;\n    }, this);\n    // We have processed all mappings.\n    if (remainingLinesIndex < remainingLines.length) {\n      if (lastMapping) {\n        // Associate the remaining code in the current line with \"lastMapping\"\n        addMappingWithCode(lastMapping, shiftNextLine());\n      }\n      // and add the remaining lines without any mapping\n      node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n    }\n\n    // Copy sourcesContent into SourceNode\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aRelativePath != null) {\n          sourceFile = util.join(aRelativePath, sourceFile);\n        }\n        node.setSourceContent(sourceFile, content);\n      }\n    });\n\n    return node;\n\n    function addMappingWithCode(mapping, code) {\n      if (mapping === null || mapping.source === undefined) {\n        node.add(code);\n      } else {\n        var source = aRelativePath\n          ? util.join(aRelativePath, mapping.source)\n          : mapping.source;\n        node.add(new SourceNode(mapping.originalLine,\n                                mapping.originalColumn,\n                                source,\n                                code,\n                                mapping.name));\n      }\n    }\n  };\n\n/**\n * Add a chunk of generated JS to this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */\nSourceNode.prototype.add = function SourceNode_add(aChunk) {\n  if (Array.isArray(aChunk)) {\n    aChunk.forEach(function (chunk) {\n      this.add(chunk);\n    }, this);\n  }\n  else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n    if (aChunk) {\n      this.children.push(aChunk);\n    }\n  }\n  else {\n    throw new TypeError(\n      \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n    );\n  }\n  return this;\n};\n\n/**\n * Add a chunk of generated JS to the beginning of this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */\nSourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {\n  if (Array.isArray(aChunk)) {\n    for (var i = aChunk.length-1; i >= 0; i--) {\n      this.prepend(aChunk[i]);\n    }\n  }\n  else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n    this.children.unshift(aChunk);\n  }\n  else {\n    throw new TypeError(\n      \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n    );\n  }\n  return this;\n};\n\n/**\n * Walk over the tree of JS snippets in this node and its children. The\n * walking function is called once for each snippet of JS and is passed that\n * snippet and the its original associated source's line/column location.\n *\n * @param aFn The traversal function.\n */\nSourceNode.prototype.walk = function SourceNode_walk(aFn) {\n  var chunk;\n  for (var i = 0, len = this.children.length; i < len; i++) {\n    chunk = this.children[i];\n    if (chunk[isSourceNode]) {\n      chunk.walk(aFn);\n    }\n    else {\n      if (chunk !== '') {\n        aFn(chunk, { source: this.source,\n                     line: this.line,\n                     column: this.column,\n                     name: this.name });\n      }\n    }\n  }\n};\n\n/**\n * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n * each of `this.children`.\n *\n * @param aSep The separator.\n */\nSourceNode.prototype.join = function SourceNode_join(aSep) {\n  var newChildren;\n  var i;\n  var len = this.children.length;\n  if (len > 0) {\n    newChildren = [];\n    for (i = 0; i < len-1; i++) {\n      newChildren.push(this.children[i]);\n      newChildren.push(aSep);\n    }\n    newChildren.push(this.children[i]);\n    this.children = newChildren;\n  }\n  return this;\n};\n\n/**\n * Call String.prototype.replace on the very right-most source snippet. Useful\n * for trimming whitespace from the end of a source node, etc.\n *\n * @param aPattern The pattern to replace.\n * @param aReplacement The thing to replace the pattern with.\n */\nSourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {\n  var lastChild = this.children[this.children.length - 1];\n  if (lastChild[isSourceNode]) {\n    lastChild.replaceRight(aPattern, aReplacement);\n  }\n  else if (typeof lastChild === 'string') {\n    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n  }\n  else {\n    this.children.push(''.replace(aPattern, aReplacement));\n  }\n  return this;\n};\n\n/**\n * Set the source content for a source file. This will be added to the SourceMapGenerator\n * in the sourcesContent field.\n *\n * @param aSourceFile The filename of the source file\n * @param aSourceContent The content of the source file\n */\nSourceNode.prototype.setSourceContent =\n  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n  };\n\n/**\n * Walk over the tree of SourceNodes. The walking function is called for each\n * source file content and is passed the filename and source content.\n *\n * @param aFn The traversal function.\n */\nSourceNode.prototype.walkSourceContents =\n  function SourceNode_walkSourceContents(aFn) {\n    for (var i = 0, len = this.children.length; i < len; i++) {\n      if (this.children[i][isSourceNode]) {\n        this.children[i].walkSourceContents(aFn);\n      }\n    }\n\n    var sources = Object.keys(this.sourceContents);\n    for (var i = 0, len = sources.length; i < len; i++) {\n      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n    }\n  };\n\n/**\n * Return the string representation of this source node. Walks over the tree\n * and concatenates all the various snippets together to one string.\n */\nSourceNode.prototype.toString = function SourceNode_toString() {\n  var str = \"\";\n  this.walk(function (chunk) {\n    str += chunk;\n  });\n  return str;\n};\n\n/**\n * Returns the string representation of this source node along with a source\n * map.\n */\nSourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {\n  var generated = {\n    code: \"\",\n    line: 1,\n    column: 0\n  };\n  var map = new SourceMapGenerator(aArgs);\n  var sourceMappingActive = false;\n  var lastOriginalSource = null;\n  var lastOriginalLine = null;\n  var lastOriginalColumn = null;\n  var lastOriginalName = null;\n  this.walk(function (chunk, original) {\n    generated.code += chunk;\n    if (original.source !== null\n        && original.line !== null\n        && original.column !== null) {\n      if(lastOriginalSource !== original.source\n         || lastOriginalLine !== original.line\n         || lastOriginalColumn !== original.column\n         || lastOriginalName !== original.name) {\n        map.addMapping({\n          source: original.source,\n          original: {\n            line: original.line,\n            column: original.column\n          },\n          generated: {\n            line: generated.line,\n            column: generated.column\n          },\n          name: original.name\n        });\n      }\n      lastOriginalSource = original.source;\n      lastOriginalLine = original.line;\n      lastOriginalColumn = original.column;\n      lastOriginalName = original.name;\n      sourceMappingActive = true;\n    } else if (sourceMappingActive) {\n      map.addMapping({\n        generated: {\n          line: generated.line,\n          column: generated.column\n        }\n      });\n      lastOriginalSource = null;\n      sourceMappingActive = false;\n    }\n    for (var idx = 0, length = chunk.length; idx < length; idx++) {\n      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n        generated.line++;\n        generated.column = 0;\n        // Mappings end at eol\n        if (idx + 1 === length) {\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n      } else {\n        generated.column++;\n      }\n    }\n  });\n  this.walkSourceContents(function (sourceFile, sourceContent) {\n    map.setSourceContent(sourceFile, sourceContent);\n  });\n\n  return { code: generated.code, map: map };\n};\n\nexports.SourceNode = SourceNode;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * This is a helper function for getting values from parameter/options\n * objects.\n *\n * @param args The object we are extracting values from\n * @param name The name of the property we are getting.\n * @param defaultValue An optional value to return if the property is missing\n * from the object. If this is not specified and the property is missing, an\n * error will be thrown.\n */\nfunction getArg(aArgs, aName, aDefaultValue) {\n  if (aName in aArgs) {\n    return aArgs[aName];\n  } else if (arguments.length === 3) {\n    return aDefaultValue;\n  } else {\n    throw new Error('\"' + aName + '\" is a required argument.');\n  }\n}\nexports.getArg = getArg;\n\nvar urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.]*)(?::(\\d+))?(\\S*)$/;\nvar dataUrlRegexp = /^data:.+\\,.+$/;\n\nfunction urlParse(aUrl) {\n  var match = aUrl.match(urlRegexp);\n  if (!match) {\n    return null;\n  }\n  return {\n    scheme: match[1],\n    auth: match[2],\n    host: match[3],\n    port: match[4],\n    path: match[5]\n  };\n}\nexports.urlParse = urlParse;\n\nfunction urlGenerate(aParsedUrl) {\n  var url = '';\n  if (aParsedUrl.scheme) {\n    url += aParsedUrl.scheme + ':';\n  }\n  url += '//';\n  if (aParsedUrl.auth) {\n    url += aParsedUrl.auth + '@';\n  }\n  if (aParsedUrl.host) {\n    url += aParsedUrl.host;\n  }\n  if (aParsedUrl.port) {\n    url += \":\" + aParsedUrl.port\n  }\n  if (aParsedUrl.path) {\n    url += aParsedUrl.path;\n  }\n  return url;\n}\nexports.urlGenerate = urlGenerate;\n\n/**\n * Normalizes a path, or the path portion of a URL:\n *\n * - Replaces consecutive slashes with one slash.\n * - Removes unnecessary '.' parts.\n * - Removes unnecessary '<dir>/..' parts.\n *\n * Based on code in the Node.js 'path' core module.\n *\n * @param aPath The path or url to normalize.\n */\nfunction normalize(aPath) {\n  var path = aPath;\n  var url = urlParse(aPath);\n  if (url) {\n    if (!url.path) {\n      return aPath;\n    }\n    path = url.path;\n  }\n  var isAbsolute = exports.isAbsolute(path);\n\n  var parts = path.split(/\\/+/);\n  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n    part = parts[i];\n    if (part === '.') {\n      parts.splice(i, 1);\n    } else if (part === '..') {\n      up++;\n    } else if (up > 0) {\n      if (part === '') {\n        // The first part is blank if the path is absolute. Trying to go\n        // above the root is a no-op. Therefore we can remove all '..' parts\n        // directly after the root.\n        parts.splice(i + 1, up);\n        up = 0;\n      } else {\n        parts.splice(i, 2);\n        up--;\n      }\n    }\n  }\n  path = parts.join('/');\n\n  if (path === '') {\n    path = isAbsolute ? '/' : '.';\n  }\n\n  if (url) {\n    url.path = path;\n    return urlGenerate(url);\n  }\n  return path;\n}\nexports.normalize = normalize;\n\n/**\n * Joins two paths/URLs.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be joined with the root.\n *\n * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a\n *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended\n *   first.\n * - Otherwise aPath is a path. If aRoot is a URL, then its path portion\n *   is updated with the result and aRoot is returned. Otherwise the result\n *   is returned.\n *   - If aPath is absolute, the result is aPath.\n *   - Otherwise the two paths are joined with a slash.\n * - Joining for example 'http://' and 'www.example.com' is also supported.\n */\nfunction join(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n  if (aPath === \"\") {\n    aPath = \".\";\n  }\n  var aPathUrl = urlParse(aPath);\n  var aRootUrl = urlParse(aRoot);\n  if (aRootUrl) {\n    aRoot = aRootUrl.path || '/';\n  }\n\n  // `join(foo, '//www.example.org')`\n  if (aPathUrl && !aPathUrl.scheme) {\n    if (aRootUrl) {\n      aPathUrl.scheme = aRootUrl.scheme;\n    }\n    return urlGenerate(aPathUrl);\n  }\n\n  if (aPathUrl || aPath.match(dataUrlRegexp)) {\n    return aPath;\n  }\n\n  // `join('http://', 'www.example.com')`\n  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n    aRootUrl.host = aPath;\n    return urlGenerate(aRootUrl);\n  }\n\n  var joined = aPath.charAt(0) === '/'\n    ? aPath\n    : normalize(aRoot.replace(/\\/+$/, '') + '/' + aPath);\n\n  if (aRootUrl) {\n    aRootUrl.path = joined;\n    return urlGenerate(aRootUrl);\n  }\n  return joined;\n}\nexports.join = join;\n\nexports.isAbsolute = function (aPath) {\n  return aPath.charAt(0) === '/' || !!aPath.match(urlRegexp);\n};\n\n/**\n * Make a path relative to a URL or another path.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be made relative to aRoot.\n */\nfunction relative(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n\n  aRoot = aRoot.replace(/\\/$/, '');\n\n  // It is possible for the path to be above the root. In this case, simply\n  // checking whether the root is a prefix of the path won't work. Instead, we\n  // need to remove components from the root one by one, until either we find\n  // a prefix that fits, or we run out of components to remove.\n  var level = 0;\n  while (aPath.indexOf(aRoot + '/') !== 0) {\n    var index = aRoot.lastIndexOf(\"/\");\n    if (index < 0) {\n      return aPath;\n    }\n\n    // If the only part of the root that is left is the scheme (i.e. http://,\n    // file:///, etc.), one or more slashes (/), or simply nothing at all, we\n    // have exhausted all components, so the path is not relative to the root.\n    aRoot = aRoot.slice(0, index);\n    if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n      return aPath;\n    }\n\n    ++level;\n  }\n\n  // Make sure we add a \"../\" for each component we removed from the root.\n  return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n}\nexports.relative = relative;\n\nvar supportsNullProto = (function () {\n  var obj = Object.create(null);\n  return !('__proto__' in obj);\n}());\n\nfunction identity (s) {\n  return s;\n}\n\n/**\n * Because behavior goes wacky when you set `__proto__` on objects, we\n * have to prefix all the strings in our set with an arbitrary character.\n *\n * See https://github.com/mozilla/source-map/pull/31 and\n * https://github.com/mozilla/source-map/issues/30\n *\n * @param String aStr\n */\nfunction toSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return '$' + aStr;\n  }\n\n  return aStr;\n}\nexports.toSetString = supportsNullProto ? identity : toSetString;\n\nfunction fromSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return aStr.slice(1);\n  }\n\n  return aStr;\n}\nexports.fromSetString = supportsNullProto ? identity : fromSetString;\n\nfunction isProtoString(s) {\n  if (!s) {\n    return false;\n  }\n\n  var length = s.length;\n\n  if (length < 9 /* \"__proto__\".length */) {\n    return false;\n  }\n\n  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 2) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 4) !== 116 /* 't' */ ||\n      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||\n      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||\n      s.charCodeAt(length - 8) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 9) !== 95  /* '_' */) {\n    return false;\n  }\n\n  for (var i = length - 10; i >= 0; i--) {\n    if (s.charCodeAt(i) !== 36 /* '$' */) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Comparator between two mappings where the original positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same original source/line/column, but different generated\n * line and column the same. Useful when searching for a mapping with a\n * stubbed out mapping.\n */\nfunction compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n  var cmp = mappingA.source - mappingB.source;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0 || onlyCompareOriginal) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return mappingA.name - mappingB.name;\n}\nexports.compareByOriginalPositions = compareByOriginalPositions;\n\n/**\n * Comparator between two mappings with deflated source and name indices where\n * the generated positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same generated line and column, but different\n * source/name/original line and column the same. Useful when searching for a\n * mapping with a stubbed out mapping.\n */\nfunction compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0 || onlyCompareGenerated) {\n    return cmp;\n  }\n\n  cmp = mappingA.source - mappingB.source;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return mappingA.name - mappingB.name;\n}\nexports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n\nfunction strcmp(aStr1, aStr2) {\n  if (aStr1 === aStr2) {\n    return 0;\n  }\n\n  if (aStr1 > aStr2) {\n    return 1;\n  }\n\n  return -1;\n}\n\n/**\n * Comparator between two mappings with inflated source and name strings where\n * the generated positions are compared.\n */\nfunction compareByGeneratedPositionsInflated(mappingA, mappingB) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n","___DISABLE_OBSOLETE_ZIP_ARCHIVER_WAIT_FOR_BARS = true;\n//require(\"../../../psknode/bundles/pskruntime.js\");\nvar callflowModule = require(\"callflow\");\nlet assetUtils = require(\"./blockchainSwarmTypes/asset_swarm_template\");\nlet transactionUtils = require(\"./blockchainSwarmTypes/transaction_swarm_template\");\n$$.assets           = callflowModule.createSwarmEngine(\"asset\", assetUtils);\n$$.asset            = $$.assets;\n$$.transactions     = callflowModule.createSwarmEngine(\"transaction\", transactionUtils);\n$$.transaction      = $$.transactions;\n\nmodule.exports = require('./moduleExports');\n\n","var toString = Object.prototype.toString\n\nvar isModern = (\n  typeof Buffer.alloc === 'function' &&\n  typeof Buffer.allocUnsafe === 'function' &&\n  typeof Buffer.from === 'function'\n)\n\nfunction isArrayBuffer (input) {\n  return toString.call(input).slice(8, -1) === 'ArrayBuffer'\n}\n\nfunction fromArrayBuffer (obj, byteOffset, length) {\n  byteOffset >>>= 0\n\n  var maxLength = obj.byteLength - byteOffset\n\n  if (maxLength < 0) {\n    throw new RangeError(\"'offset' is out of bounds\")\n  }\n\n  if (length === undefined) {\n    length = maxLength\n  } else {\n    length >>>= 0\n\n    if (length > maxLength) {\n      throw new RangeError(\"'length' is out of bounds\")\n    }\n  }\n\n  return isModern\n    ? Buffer.from(obj.slice(byteOffset, byteOffset + length))\n    : new Buffer(new Uint8Array(obj.slice(byteOffset, byteOffset + length)))\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  return isModern\n    ? Buffer.from(string, encoding)\n    : new Buffer(string, encoding)\n}\n\nfunction bufferFrom (value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (isArrayBuffer(value)) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  return isModern\n    ? Buffer.from(value)\n    : new Buffer(value)\n}\n\nmodule.exports = bufferFrom\n","var SourceMapConsumer = require('source-map').SourceMapConsumer;\nvar path = require('path');\n\nvar fs;\ntry {\n  fs = require('fs');\n  if (!fs.existsSync || !fs.readFileSync) {\n    // fs doesn't have all methods we need\n    fs = null;\n  }\n} catch (err) {\n  /* nop */\n}\n\nvar bufferFrom = require('buffer-from');\n\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param {NodeModule} mod\n * @param {string} request\n */\nfunction dynamicRequire(mod, request) {\n  return mod.require(request);\n}\n\n// Only install once if called multiple times\nvar errorFormatterInstalled = false;\nvar uncaughtShimInstalled = false;\n\n// If true, the caches are reset before a stack trace formatting operation\nvar emptyCacheBetweenOperations = false;\n\n// Supports {browser, node, auto}\nvar environment = \"auto\";\n\n// Maps a file path to a string containing the file contents\nvar fileContentsCache = {};\n\n// Maps a file path to a source map for that file\nvar sourceMapCache = {};\n\n// Regex for detecting source maps\nvar reSourceMap = /^data:application\\/json[^,]+base64,/;\n\n// Priority list of retrieve handlers\nvar retrieveFileHandlers = [];\nvar retrieveMapHandlers = [];\n\nfunction isInBrowser() {\n  if (environment === \"browser\")\n    return true;\n  if (environment === \"node\")\n    return false;\n  return ((typeof window !== 'undefined') && (typeof XMLHttpRequest === 'function') && !(window.require && window.module && window.process && window.process.type === \"renderer\"));\n}\n\nfunction hasGlobalProcessEventEmitter() {\n  return ((typeof process === 'object') && (process !== null) && (typeof process.on === 'function'));\n}\n\nfunction handlerExec(list) {\n  return function(arg) {\n    for (var i = 0; i < list.length; i++) {\n      var ret = list[i](arg);\n      if (ret) {\n        return ret;\n      }\n    }\n    return null;\n  };\n}\n\nvar retrieveFile = handlerExec(retrieveFileHandlers);\n\nretrieveFileHandlers.push(function(path) {\n  // Trim the path to make sure there is no extra whitespace.\n  path = path.trim();\n  if (/^file:/.test(path)) {\n    // existsSync/readFileSync can't handle file protocol, but once stripped, it works\n    path = path.replace(/file:\\/\\/\\/(\\w:)?/, function(protocol, drive) {\n      return drive ?\n        '' : // file:///C:/dir/file -> C:/dir/file\n        '/'; // file:///root-dir/file -> /root-dir/file\n    });\n  }\n  if (path in fileContentsCache) {\n    return fileContentsCache[path];\n  }\n\n  var contents = '';\n  try {\n    if (!fs) {\n      // Use SJAX if we are in the browser\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', path, /** async */ false);\n      xhr.send(null);\n      if (xhr.readyState === 4 && xhr.status === 200) {\n        contents = xhr.responseText;\n      }\n    } else if (fs.existsSync(path)) {\n      // Otherwise, use the filesystem\n      contents = fs.readFileSync(path, 'utf8');\n    }\n  } catch (er) {\n    /* ignore any errors */\n  }\n\n  return fileContentsCache[path] = contents;\n});\n\n// Support URLs relative to a directory, but be careful about a protocol prefix\n// in case we are in the browser (i.e. directories may start with \"http://\" or \"file:///\")\nfunction supportRelativeURL(file, url) {\n  if (!file) return url;\n  var dir = path.dirname(file);\n  var match = /^\\w+:\\/\\/[^\\/]*/.exec(dir);\n  var protocol = match ? match[0] : '';\n  var startPath = dir.slice(protocol.length);\n  if (protocol && /^\\/\\w\\:/.test(startPath)) {\n    // handle file:///C:/ paths\n    protocol += '/';\n    return protocol + path.resolve(dir.slice(protocol.length), url).replace(/\\\\/g, '/');\n  }\n  return protocol + path.resolve(dir.slice(protocol.length), url);\n}\n\nfunction retrieveSourceMapURL(source) {\n  var fileData;\n\n  if (isInBrowser()) {\n     try {\n       var xhr = new XMLHttpRequest();\n       xhr.open('GET', source, false);\n       xhr.send(null);\n       fileData = xhr.readyState === 4 ? xhr.responseText : null;\n\n       // Support providing a sourceMappingURL via the SourceMap header\n       var sourceMapHeader = xhr.getResponseHeader(\"SourceMap\") ||\n                             xhr.getResponseHeader(\"X-SourceMap\");\n       if (sourceMapHeader) {\n         return sourceMapHeader;\n       }\n     } catch (e) {\n     }\n  }\n\n  // Get the URL of the source map\n  fileData = retrieveFile(source);\n  var re = /(?:\\/\\/[@#][\\s]*sourceMappingURL=([^\\s'\"]+)[\\s]*$)|(?:\\/\\*[@#][\\s]*sourceMappingURL=([^\\s*'\"]+)[\\s]*(?:\\*\\/)[\\s]*$)/mg;\n  // Keep executing the search to find the *last* sourceMappingURL to avoid\n  // picking up sourceMappingURLs from comments, strings, etc.\n  var lastMatch, match;\n  while (match = re.exec(fileData)) lastMatch = match;\n  if (!lastMatch) return null;\n  return lastMatch[1];\n};\n\n// Can be overridden by the retrieveSourceMap option to install. Takes a\n// generated source filename; returns a {map, optional url} object, or null if\n// there is no source map.  The map field may be either a string or the parsed\n// JSON object (ie, it must be a valid argument to the SourceMapConsumer\n// constructor).\nvar retrieveSourceMap = handlerExec(retrieveMapHandlers);\nretrieveMapHandlers.push(function(source) {\n  var sourceMappingURL = retrieveSourceMapURL(source);\n  if (!sourceMappingURL) return null;\n\n  // Read the contents of the source map\n  var sourceMapData;\n  if (reSourceMap.test(sourceMappingURL)) {\n    // Support source map URL as a data url\n    var rawData = sourceMappingURL.slice(sourceMappingURL.indexOf(',') + 1);\n    sourceMapData = bufferFrom(rawData, \"base64\").toString();\n    sourceMappingURL = source;\n  } else {\n    // Support source map URLs relative to the source URL\n    sourceMappingURL = supportRelativeURL(source, sourceMappingURL);\n    sourceMapData = retrieveFile(sourceMappingURL);\n  }\n\n  if (!sourceMapData) {\n    return null;\n  }\n\n  return {\n    url: sourceMappingURL,\n    map: sourceMapData\n  };\n});\n\nfunction mapSourcePosition(position) {\n  var sourceMap = sourceMapCache[position.source];\n  if (!sourceMap) {\n    // Call the (overrideable) retrieveSourceMap function to get the source map.\n    var urlAndMap = retrieveSourceMap(position.source);\n    if (urlAndMap) {\n      sourceMap = sourceMapCache[position.source] = {\n        url: urlAndMap.url,\n        map: new SourceMapConsumer(urlAndMap.map)\n      };\n\n      // Load all sources stored inline with the source map into the file cache\n      // to pretend like they are already loaded. They may not exist on disk.\n      if (sourceMap.map.sourcesContent) {\n        sourceMap.map.sources.forEach(function(source, i) {\n          var contents = sourceMap.map.sourcesContent[i];\n          if (contents) {\n            var url = supportRelativeURL(sourceMap.url, source);\n            fileContentsCache[url] = contents;\n          }\n        });\n      }\n    } else {\n      sourceMap = sourceMapCache[position.source] = {\n        url: null,\n        map: null\n      };\n    }\n  }\n\n  // Resolve the source URL relative to the URL of the source map\n  if (sourceMap && sourceMap.map && typeof sourceMap.map.originalPositionFor === 'function') {\n    var originalPosition = sourceMap.map.originalPositionFor(position);\n\n    // Only return the original position if a matching line was found. If no\n    // matching line is found then we return position instead, which will cause\n    // the stack trace to print the path and line for the compiled file. It is\n    // better to give a precise location in the compiled file than a vague\n    // location in the original file.\n    if (originalPosition.source !== null) {\n      originalPosition.source = supportRelativeURL(\n        sourceMap.url, originalPosition.source);\n      return originalPosition;\n    }\n  }\n\n  return position;\n}\n\n// Parses code generated by FormatEvalOrigin(), a function inside V8:\n// https://code.google.com/p/v8/source/browse/trunk/src/messages.js\nfunction mapEvalOrigin(origin) {\n  // Most eval() calls are in this format\n  var match = /^eval at ([^(]+) \\((.+):(\\d+):(\\d+)\\)$/.exec(origin);\n  if (match) {\n    var position = mapSourcePosition({\n      source: match[2],\n      line: +match[3],\n      column: match[4] - 1\n    });\n    return 'eval at ' + match[1] + ' (' + position.source + ':' +\n      position.line + ':' + (position.column + 1) + ')';\n  }\n\n  // Parse nested eval() calls using recursion\n  match = /^eval at ([^(]+) \\((.+)\\)$/.exec(origin);\n  if (match) {\n    return 'eval at ' + match[1] + ' (' + mapEvalOrigin(match[2]) + ')';\n  }\n\n  // Make sure we still return useful information if we didn't find anything\n  return origin;\n}\n\n// This is copied almost verbatim from the V8 source code at\n// https://code.google.com/p/v8/source/browse/trunk/src/messages.js. The\n// implementation of wrapCallSite() used to just forward to the actual source\n// code of CallSite.prototype.toString but unfortunately a new release of V8\n// did something to the prototype chain and broke the shim. The only fix I\n// could find was copy/paste.\nfunction CallSiteToString() {\n  var fileName;\n  var fileLocation = \"\";\n  if (this.isNative()) {\n    fileLocation = \"native\";\n  } else {\n    fileName = this.getScriptNameOrSourceURL();\n    if (!fileName && this.isEval()) {\n      fileLocation = this.getEvalOrigin();\n      fileLocation += \", \";  // Expecting source position to follow.\n    }\n\n    if (fileName) {\n      fileLocation += fileName;\n    } else {\n      // Source code does not originate from a file and is not native, but we\n      // can still get the source position inside the source string, e.g. in\n      // an eval string.\n      fileLocation += \"<anonymous>\";\n    }\n    var lineNumber = this.getLineNumber();\n    if (lineNumber != null) {\n      fileLocation += \":\" + lineNumber;\n      var columnNumber = this.getColumnNumber();\n      if (columnNumber) {\n        fileLocation += \":\" + columnNumber;\n      }\n    }\n  }\n\n  var line = \"\";\n  var functionName = this.getFunctionName();\n  var addSuffix = true;\n  var isConstructor = this.isConstructor();\n  var isMethodCall = !(this.isToplevel() || isConstructor);\n  if (isMethodCall) {\n    var typeName = this.getTypeName();\n    // Fixes shim to be backward compatable with Node v0 to v4\n    if (typeName === \"[object Object]\") {\n      typeName = \"null\";\n    }\n    var methodName = this.getMethodName();\n    if (functionName) {\n      if (typeName && functionName.indexOf(typeName) != 0) {\n        line += typeName + \".\";\n      }\n      line += functionName;\n      if (methodName && functionName.indexOf(\".\" + methodName) != functionName.length - methodName.length - 1) {\n        line += \" [as \" + methodName + \"]\";\n      }\n    } else {\n      line += typeName + \".\" + (methodName || \"<anonymous>\");\n    }\n  } else if (isConstructor) {\n    line += \"new \" + (functionName || \"<anonymous>\");\n  } else if (functionName) {\n    line += functionName;\n  } else {\n    line += fileLocation;\n    addSuffix = false;\n  }\n  if (addSuffix) {\n    line += \" (\" + fileLocation + \")\";\n  }\n  return line;\n}\n\nfunction cloneCallSite(frame) {\n  var object = {};\n  Object.getOwnPropertyNames(Object.getPrototypeOf(frame)).forEach(function(name) {\n    object[name] = /^(?:is|get)/.test(name) ? function() { return frame[name].call(frame); } : frame[name];\n  });\n  object.toString = CallSiteToString;\n  return object;\n}\n\nfunction wrapCallSite(frame, state) {\n  // provides interface backward compatibility\n  if (state === undefined) {\n    state = { nextPosition: null, curPosition: null }\n  }\n  if(frame.isNative()) {\n    state.curPosition = null;\n    return frame;\n  }\n\n  // Most call sites will return the source file from getFileName(), but code\n  // passed to eval() ending in \"//# sourceURL=...\" will return the source file\n  // from getScriptNameOrSourceURL() instead\n  var source = frame.getFileName() || frame.getScriptNameOrSourceURL();\n  if (source) {\n    var line = frame.getLineNumber();\n    var column = frame.getColumnNumber() - 1;\n\n    // Fix position in Node where some (internal) code is prepended.\n    // See https://github.com/evanw/node-source-map-support/issues/36\n    // Header removed in node at ^10.16 || >=11.11.0\n    // v11 is not an LTS candidate, we can just test the one version with it.\n    // Test node versions for: 10.16-19, 10.20+, 12-19, 20-99, 100+, or 11.11\n    var noHeader = /^v(10\\.1[6-9]|10\\.[2-9][0-9]|10\\.[0-9]{3,}|1[2-9]\\d*|[2-9]\\d|\\d{3,}|11\\.11)/;\n    var headerLength = noHeader.test(process.version) ? 0 : 62;\n    if (line === 1 && column > headerLength && !isInBrowser() && !frame.isEval()) {\n      column -= headerLength;\n    }\n\n    var position = mapSourcePosition({\n      source: source,\n      line: line,\n      column: column\n    });\n    state.curPosition = position;\n    frame = cloneCallSite(frame);\n    var originalFunctionName = frame.getFunctionName;\n    frame.getFunctionName = function() {\n      if (state.nextPosition == null) {\n        return originalFunctionName();\n      }\n      return state.nextPosition.name || originalFunctionName();\n    };\n    frame.getFileName = function() { return position.source; };\n    frame.getLineNumber = function() { return position.line; };\n    frame.getColumnNumber = function() { return position.column + 1; };\n    frame.getScriptNameOrSourceURL = function() { return position.source; };\n    return frame;\n  }\n\n  // Code called using eval() needs special handling\n  var origin = frame.isEval() && frame.getEvalOrigin();\n  if (origin) {\n    origin = mapEvalOrigin(origin);\n    frame = cloneCallSite(frame);\n    frame.getEvalOrigin = function() { return origin; };\n    return frame;\n  }\n\n  // If we get here then we were unable to change the source position\n  return frame;\n}\n\n// This function is part of the V8 stack trace API, for more info see:\n// https://v8.dev/docs/stack-trace-api\nfunction prepareStackTrace(error, stack) {\n  if (emptyCacheBetweenOperations) {\n    fileContentsCache = {};\n    sourceMapCache = {};\n  }\n\n  var name = error.name || 'Error';\n  var message = error.message || '';\n  var errorString = name + \": \" + message;\n\n  var state = { nextPosition: null, curPosition: null };\n  var processedStack = [];\n  for (var i = stack.length - 1; i >= 0; i--) {\n    processedStack.push('\\n    at ' + wrapCallSite(stack[i], state));\n    state.nextPosition = state.curPosition;\n  }\n  state.curPosition = state.nextPosition = null;\n  return errorString + processedStack.reverse().join('');\n}\n\n// Generate position and snippet of original source with pointer\nfunction getErrorSource(error) {\n  var match = /\\n    at [^(]+ \\((.*):(\\d+):(\\d+)\\)/.exec(error.stack);\n  if (match) {\n    var source = match[1];\n    var line = +match[2];\n    var column = +match[3];\n\n    // Support the inline sourceContents inside the source map\n    var contents = fileContentsCache[source];\n\n    // Support files on disk\n    if (!contents && fs && fs.existsSync(source)) {\n      try {\n        contents = fs.readFileSync(source, 'utf8');\n      } catch (er) {\n        contents = '';\n      }\n    }\n\n    // Format the line from the original source code like node does\n    if (contents) {\n      var code = contents.split(/(?:\\r\\n|\\r|\\n)/)[line - 1];\n      if (code) {\n        return source + ':' + line + '\\n' + code + '\\n' +\n          new Array(column).join(' ') + '^';\n      }\n    }\n  }\n  return null;\n}\n\nfunction printErrorAndExit (error) {\n  var source = getErrorSource(error);\n\n  // Ensure error is printed synchronously and not truncated\n  if (process.stderr._handle && process.stderr._handle.setBlocking) {\n    process.stderr._handle.setBlocking(true);\n  }\n\n  if (source) {\n    console.error();\n    console.error(source);\n  }\n\n  console.error(error.stack);\n  process.exit(1);\n}\n\nfunction shimEmitUncaughtException () {\n  var origEmit = process.emit;\n\n  process.emit = function (type) {\n    if (type === 'uncaughtException') {\n      var hasStack = (arguments[1] && arguments[1].stack);\n      var hasListeners = (this.listeners(type).length > 0);\n\n      if (hasStack && !hasListeners) {\n        return printErrorAndExit(arguments[1]);\n      }\n    }\n\n    return origEmit.apply(this, arguments);\n  };\n}\n\nvar originalRetrieveFileHandlers = retrieveFileHandlers.slice(0);\nvar originalRetrieveMapHandlers = retrieveMapHandlers.slice(0);\n\nexports.wrapCallSite = wrapCallSite;\nexports.getErrorSource = getErrorSource;\nexports.mapSourcePosition = mapSourcePosition;\nexports.retrieveSourceMap = retrieveSourceMap;\n\nexports.install = function(options) {\n  options = options || {};\n\n  if (options.environment) {\n    environment = options.environment;\n    if ([\"node\", \"browser\", \"auto\"].indexOf(environment) === -1) {\n      throw new Error(\"environment \" + environment + \" was unknown. Available options are {auto, browser, node}\")\n    }\n  }\n\n  // Allow sources to be found by methods other than reading the files\n  // directly from disk.\n  if (options.retrieveFile) {\n    if (options.overrideRetrieveFile) {\n      retrieveFileHandlers.length = 0;\n    }\n\n    retrieveFileHandlers.unshift(options.retrieveFile);\n  }\n\n  // Allow source maps to be found by methods other than reading the files\n  // directly from disk.\n  if (options.retrieveSourceMap) {\n    if (options.overrideRetrieveSourceMap) {\n      retrieveMapHandlers.length = 0;\n    }\n\n    retrieveMapHandlers.unshift(options.retrieveSourceMap);\n  }\n\n  // Support runtime transpilers that include inline source maps\n  if (options.hookRequire && !isInBrowser()) {\n    // Use dynamicRequire to avoid including in browser bundles\n    var Module = dynamicRequire(module, 'module');\n    var $compile = Module.prototype._compile;\n\n    if (!$compile.__sourceMapSupport) {\n      Module.prototype._compile = function(content, filename) {\n        fileContentsCache[filename] = content;\n        sourceMapCache[filename] = undefined;\n        return $compile.call(this, content, filename);\n      };\n\n      Module.prototype._compile.__sourceMapSupport = true;\n    }\n  }\n\n  // Configure options\n  if (!emptyCacheBetweenOperations) {\n    emptyCacheBetweenOperations = 'emptyCacheBetweenOperations' in options ?\n      options.emptyCacheBetweenOperations : false;\n  }\n\n  // Install the error reformatter\n  if (!errorFormatterInstalled) {\n    errorFormatterInstalled = true;\n    Error.prepareStackTrace = prepareStackTrace;\n  }\n\n  if (!uncaughtShimInstalled) {\n    var installHandler = 'handleUncaughtExceptions' in options ?\n      options.handleUncaughtExceptions : true;\n\n    // Do not override 'uncaughtException' with our own handler in Node.js\n    // Worker threads. Workers pass the error to the main thread as an event,\n    // rather than printing something to stderr and exiting.\n    try {\n      // We need to use `dynamicRequire` because `require` on it's own will be optimized by WebPack/Browserify.\n      var worker_threads = dynamicRequire(module, 'worker_threads');\n      if (worker_threads.isMainThread === false) {\n        installHandler = false;\n      }\n    } catch(e) {}\n\n    // Provide the option to not install the uncaught exception handler. This is\n    // to support other uncaught exception handlers (in test frameworks, for\n    // example). If this handler is not installed and there are no other uncaught\n    // exception handlers, uncaught exceptions will be caught by node's built-in\n    // exception handler and the process will still be terminated. However, the\n    // generated JavaScript code will be shown above the stack trace instead of\n    // the original source code.\n    if (installHandler && hasGlobalProcessEventEmitter()) {\n      uncaughtShimInstalled = true;\n      shimEmitUncaughtException();\n    }\n  }\n};\n\nexports.resetRetrieveHandlers = function() {\n  retrieveFileHandlers.length = 0;\n  retrieveMapHandlers.length = 0;\n\n  retrieveFileHandlers = originalRetrieveFileHandlers.slice(0);\n  retrieveMapHandlers = originalRetrieveMapHandlers.slice(0);\n\n  retrieveSourceMap = handlerExec(retrieveMapHandlers);\n  retrieveFile = handlerExec(retrieveFileHandlers);\n}\n","/*\n * Copyright 2009-2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE.txt or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nexports.SourceMapGenerator = require('./lib/source-map-generator').SourceMapGenerator;\nexports.SourceMapConsumer = require('./lib/source-map-consumer').SourceMapConsumer;\nexports.SourceNode = require('./lib/source-node').SourceNode;\n"]}